import{_ as i,c as a,d as n,o as e}from"./app-Bg7EXfK3.js";const h={};function l(t,s){return e(),a("div",null,[...s[0]||(s[0]=[n(`<p>随着网络爬虫技术的普及，网站为了保护数据安全和服务器资源，采用了各种反爬虫技术。</p><p>爬虫一般具备以下特征：</p><ul><li>高频访问</li><li>抓取 html 内容</li><li>抓取 数据接口</li><li>模拟用户行为，如借助 <code>Selenium</code>、<code>Pyppeteer</code> 等工具</li></ul><p>由于 Selenium、Pyppeteer 等工具的存在，像 User-Agent + Referer 检测 很容易就被绕过。</p><p>而 IP 限制频次，很容易就能通过代理 IP 池 进行绕过，当然，我们也可以建立黑名单 IP 池来封禁这些被识别为爬虫的 IP。</p><p>而且现在的图像识别技术越来越成熟，包括 AI 识图也越来越准确，一些简单的图片噪点验证码早已完全失去了其作用，成为只会影响用户体验的方案。当然现在也有很多如滑动验证码、人脸识别等方案能够 提供更好的反爬虫保护。</p><p>一些具体的手段:</p><p><strong>无限循环 + <code>debugger</code></strong></p><p>第一种常见的是，在源代码中 加入 <code>debugger</code> 语句，当打开控制台时，就会进入调试模式。</p><p>由于程序一直卡在 <code>debugger</code> 上，无法进行断点调试，网页的请求也看不到。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  setInterval</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    debugger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  bun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">反制措施</p><p>无限 <code>debugger</code> 通常只能 防止 新手小白 ，但对于有一定经验的 技术人员来说，基本不会起到什么作用。</p><p>技术人员可以通过控制台中的 <code>Deactivate breakpoints</code> 按钮或者使用快捷键 <code>Ctrl + F8</code> 关闭无限 <code>debugger</code>； 还可以通过添加 <code>add script ignore list</code> 需要忽略执行代码行或文件。</p></div><p>于是，又衍生了一些更加复杂的变式：</p><p>通过 格式化代码 将 <code>debugger</code> 压缩在一行中，<code>Deactivate breakpoints</code> 按钮或者使用快捷键 <code>Ctrl + F8</code> 就 无法关闭 <code>debugger</code>，但 <code>add script ignore list</code> 依然能够阻止 <code>debugger</code> 运行。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  setInterval</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    debugger</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  bun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步的，可以通过将 <code>debugger</code> 改写成 <code>Function(&quot;debugger&quot;)();</code> 的形式来应对 <code>add script ignore list</code></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> bun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  setInterval</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">debugger</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 50</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">try</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  bun</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> catch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">err</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>检测窗口大小变化</strong></p><p>当打开控制台时，如果是窗口内打开，控制台会吸附在侧栏，从而引起浏览器窗口变化。 可以通过检测外部窗口大小和内部窗口大小的差值，来侧面判断是否打开了控制台。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">outerHeight</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">innerHeight</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ||</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">outerWidth</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> window</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">innerWidth</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 替换网页内容</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">body</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">innerHTML</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">检测到非法调试,请关闭后刷新重试!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当检测到打开控制台后，我们可以直接替换网页的所有内容，或者重定向到一个新的空白窗口。 使之看不到正确的内容。</p><p>但其缺陷就是，如果控制台模式是选择窗口外打开的，并不会引起浏览器窗口变化。则无法判断是否打开了控制台。</p><p>但其实认真想一想，基于是否打开控制台 来判断是否有潜在爬虫行为，虽然有作用，但只有一点点 。</p><p>在 现代浏览器 Chrome ，从 <code>117</code> 版本开始, 提供了 <code>Override content</code> 的功能，它不仅可以在 <code>Network</code> 面板中发起 <code>Mock</code> 请求，还可以直接在 <code>Sources</code> 面板中，直接替换当前网页的资源内容。这意味着即使我们在代码中加入了这些检测，爬虫开发者完全可以直接在 <code>Sourcs</code> 面板中，直接修改网页内容，删除掉这些代码。</p><p>再者，还有比如 <code>Fiddler</code>、<code>Charles</code> 等抓包工具，可以直接抓取到 内容，还包括 伪装 <code>https</code> 证书等。</p><p>基于是否打开控制台的检测形同虚设。可能带来的唯一收益就是防新手小白，其负面收益可能是 进一步提高了网站的所有者、维护者自己的调试、排查成本。</p><p>所以是否有这么做的必要，只能是见仁见智。</p><h2 id="内容防御" tabindex="-1"><a class="header-anchor" href="#内容防御"><span>内容防御</span></a></h2><p>当无论如何都不能防止爬虫触及内容，被爬取到网页内容或者数据，还可以继续在内容本身上进行防御。</p><p>在内容本身上进行防御，前提是保证正常的用户访问行为呈现到内容应该都是正确的， 再通过其他措施使爬虫行为读取到的内容是不正确的。</p><p>在这一方面，不同类型的网站会运用到不同的技术手段。</p><h3 id="水印" tabindex="-1"><a class="header-anchor" href="#水印"><span>水印</span></a></h3><p>对于 内容类的网站：</p><p>通常是给 图片添加 水印 ，水印包括 可见水印 和 隐藏式水印 。</p><h3 id="字符混淆策略" tabindex="-1"><a class="header-anchor" href="#字符混淆策略"><span>字符混淆策略</span></a></h3><p>常见的方法包括， 在文字内容中，插入不可见的字符，或者重新建立一套 <code>Unicode</code> 字符映射表，使源码中的字符与网页实际渲染的字符不一致。</p><p>但如果重新建立所有的字符映射表，其工作量将会变得很大，增加了很多不必要的复杂度，所以通常来说，只需要对部分关键的内容进行处理。</p><p>通过对关键内容的字符，采用一些技术手段进行处理，使得源代码中的字符与网页实际渲染的字符不一致， 确保用户看到的内容为真实内容，而爬虫获取的内容为包含混淆字符的内容。</p><h4 id="font-face-字符集" tabindex="-1"><a class="header-anchor" href="#font-face-字符集"><span><code>font-face</code> 字符集</span></a></h4><p><code>font-face</code> 在 CSS 中被用于定义字体。</p><p>如 <code>iconfont</code> 中的图标字体。 将关键内容的字符，使用 <code>SVG</code> 进行渲染，整合成一个字体文件，再通过 <code>@font-face</code> 定义字体，在网页源代码中，引入该字体库后，使用 <code>unicode</code> 编码编写内容，再渲染为正常的内容。</p><p>这种做法，由于关键内容被替换为了 <code>unicode</code>，爬虫只能爬取到 <code>unicode</code> 码，而不是真实的内容，它还需要解析 对应的字体库进行 编码映射，才能获取到真实内容，提高了爬取的复杂度。还可以通过 动态字体库，通过不定期的 更新 字体库的编码映射关系，来增加进一步爬取的复杂度。</p><h4 id="background-image-拼凑" tabindex="-1"><a class="header-anchor" href="#background-image-拼凑"><span><code>background-image</code> 拼凑</span></a></h4><p>背景图片的拼凑，一般是运用在一些关键内容为数字、字母的场景上，因为其字符数量较少，转换为图片一般不会占用过多的资源，还可以使用“雪碧图”合并为一张图片，通过背景定位的方式控制显示的内容。</p><p>这种方式爬取到的内容只有一组空的标签，爬虫还需要进一步的读取 CSS 、获取图片、定位信息等才能分析获取内容。</p><h4 id="字符穿插" tabindex="-1"><a class="header-anchor" href="#字符穿插"><span>字符穿插</span></a></h4><p>字符穿插，主要是通过在正常的内容之间，插入不会被渲染的字符，但这些字符在源代码内容中，是可读取的。</p><p>比如， <code>12234</code> 之间插入随机的其他数字：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>插入随机数字</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">4</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">/</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">span</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后通过类名、选择器等方式，根据某些规则，将插入的随机数字进行设置为 <code>display: node</code> 等隐藏不显示。</p><p>这种方式 由于在正常的内容中插入了正常的内容，如果爬虫不知道规则的话，会误认为获取到了正确的内容，</p><h4 id="伪元素隐藏" tabindex="-1"><a class="header-anchor" href="#伪元素隐藏"><span>伪元素隐藏</span></a></h4><p>借助伪元素 <code>::before</code>，<code>::after</code>，将关键内容填充到 CSS 属性 <code>content</code> 中。</p><h4 id="元素定位穿插" tabindex="-1"><a class="header-anchor" href="#元素定位穿插"><span>元素定位穿插</span></a></h4><p>元素定位穿插，是将 正确的内容 进行 打乱重组，然后再通过 定位 的方式调整到 正确的顺序位置上。</p><h4 id="shadowdom-隐藏" tabindex="-1"><a class="header-anchor" href="#shadowdom-隐藏"><span>shadowDOM 隐藏</span></a></h4><p><code>shadowDOM</code> 通过 <code>Element.attachShadow()</code> 方法给指定的元素挂载一个 <code>Shadow DOM</code>， 将关键内容写入到 <code>Shadow DOM</code> 中。 由于 <code>Shadow DOM</code> 的特性，可以指定其 <code>mode</code> 为 <code>false</code>， 拒绝从 js 外部访问关闭的 <code>shadow root</code> 节点。</p><p>即使爬虫 通过 Selenium、Pyppeteer 也读取不到内容。缺点就是 <code>shadowDOM</code> 的兼容性问题，可能会导致部分用户也看不到内容。</p><p>当爬虫行为在商业上带来的收益十分巨大时，就会投入更多的资源去应对反爬虫的措施，做出更有针对性的爬虫程序。</p><p>这一现象特别是在电商类、平台类的网站尤为严重。为了打出价格优势，需要及时的获取竞争平台的商品价格，调整自身平台的价格、优惠策略等。包括了价格监控、价格变动监控、价格预警等等一些列措施。</p><p>往往当一方的反爬虫方案进行技术调整后，另一方的爬虫一旦获取不到内容，就会立即发出邮件、短信等进行预警通知。双方就形成了一种长时间的持久的互为攻防的拉锯战。</p><p>从现状来看，反爬虫是很难完全实现防御住爬虫爬取到内容的，而且爬虫也有各种手段判断是否爬取到了正确的内容。</p><p>既然杜绝不了，那么除了常规的必要的反爬虫措施之外，给爬虫一些真实内容，又有何不可呢，然后我们可以在真实内容中，掺杂上一些不那么真实的内容，又有何不可呢？</p><h2 id="常见的反爬虫策略" tabindex="-1"><a class="header-anchor" href="#常见的反爬虫策略"><span>常见的反爬虫策略</span></a></h2><h3 id="_1-基于请求特征的检测" tabindex="-1"><a class="header-anchor" href="#_1-基于请求特征的检测"><span>1. 基于请求特征的检测</span></a></h3><ul><li>User-Agent 检测：检查请求头中的 User-Agent 是否合法</li><li>请求频率限制：单位时间内过多请求会被封禁</li><li>请求间隔检测：机器请求通常间隔固定，人类操作则随机</li><li>请求头完整性检查：检查 Accept、Referer 等标准头是否存在</li></ul><h3 id="_2-基于行为的检测" tabindex="-1"><a class="header-anchor" href="#_2-基于行为的检测"><span>2. 基于行为的检测</span></a></h3><ul><li>鼠标移动轨迹：检测是否有人类般的鼠标移动</li><li>点击模式：检测点击位置和间隔时间</li><li>页面停留时间：检测在每个页面的停留时间</li><li>浏览路径：检测是否遵循常规浏览路径</li></ul><h3 id="_3-验证码机制" tabindex="-1"><a class="header-anchor" href="#_3-验证码机制"><span>3. 验证码机制</span></a></h3><ul><li>传统验证码：扭曲文字、数字识别</li><li>行为验证码：如滑动拼图、点选文字等</li><li>智能验证码：如 Google reCAPTCHA</li><li>短信/邮件验证码：需要人工输入接收的验证码</li></ul><h3 id="_4-动态页面技术" tabindex="-1"><a class="header-anchor" href="#_4-动态页面技术"><span>4. 动态页面技术</span></a></h3><ul><li>JavaScript 渲染：核心内容由 JS 动态生成</li><li>Ajax 异步加载：数据通过异步请求获取</li><li>Token 验证：每次请求需要携带动态生成的 token</li><li>接口加密：API 返回数据经过加密处理</li></ul><h3 id="_5-数据混淆技术" tabindex="-1"><a class="header-anchor" href="#_5-数据混淆技术"><span>5. 数据混淆技术</span></a></h3><ul><li>字体反爬：使用自定义字体映射</li><li>CSS 偏移：通过 CSS 定位打乱页面显示顺序</li><li>图片化数据：将关键数据转为图片格式</li><li>数据分块加载：分多次请求完整数据</li></ul><h3 id="_6-账号与登录限制" tabindex="-1"><a class="header-anchor" href="#_6-账号与登录限制"><span>6. 账号与登录限制</span></a></h3><ul><li>强制登录：必须登录才能查看内容</li><li>访问权限分级：不同级别账号看到的内容不同</li><li>账号行为监控：异常账号会被限制或封禁</li></ul><h3 id="_7-其他高级技术" tabindex="-1"><a class="header-anchor" href="#_7-其他高级技术"><span>7. 其他高级技术</span></a></h3><ul><li>WebAssembly 检测：通过 WASM 进行环境检测</li><li>Canvas 指纹：利用 Canvas 生成浏览器指纹</li><li>WebGL 指纹：通过 WebGL 渲染生成设备指纹</li><li>流量分析：分析网络流量模式识别爬虫</li></ul><h2 id="应对反爬虫的建议" tabindex="-1"><a class="header-anchor" href="#应对反爬虫的建议"><span>应对反爬虫的建议</span></a></h2><ol><li>遵守 robots.txt 协议和网站使用条款</li><li>合理设置请求间隔和频率</li><li>使用高质量的代理 IP 池</li><li>模拟人类操作行为</li><li>优先考虑官方 API(如果可用)</li><li>必要时与网站方沟通获取合法数据访问权限</li></ol><p>使用爬虫技术时应始终遵守相关法律法规，尊重网站的数据权益和服务器资源。</p>`,83)])])}const k=i(h,[["render",l]]),d=JSON.parse('{"path":"/article/85fs7z4n/","title":"常见的反扒虫策略","lang":"zh-CN","frontmatter":{"title":"常见的反扒虫策略","createTime":"2025/06/13 10:20:06","permalink":"/article/85fs7z4n/"},"readingTime":{"minutes":9.99,"words":2998},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"爬虫/常见的反扒虫策略.md","headers":[],"categoryList":[{"id":"fdd054","sort":10005,"name":"爬虫"}],"bulletin":false}');export{k as comp,d as data};
