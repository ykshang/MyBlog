import{_ as r,c as t,d as e,o as n}from"./app-Bg7EXfK3.js";const s={};function o(i,a){return n(),t("div",null,[...a[0]||(a[0]=[e('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Gzip 是一种常用的数据压缩格式，由 Jean-loup Gailly 和 Mark Adler 开发，其名称源于 GNU zip。它 <strong>基于 DEFLATE 算法</strong>，这是一种无损数据压缩算法，结合了 <strong>LZ77 算法</strong> 和 <strong>哈夫曼编码</strong>。</p><p>Gzip 通常用于在网络传输中压缩文件，以减少数据传输量，提高传输速度，节省带宽。在 Web 开发中，服务器常使用 Gzip 压缩 HTML、CSS、JavaScript 等静态资源，浏览器在接收到压缩数据后进行解压缩。</p><h2 id="压缩流程" tabindex="-1"><a class="header-anchor" href="#压缩流程"><span>压缩流程</span></a></h2><ol><li><strong>输入数据分块</strong>：将待压缩的原始数据分割成多个小块，便于处理。</li><li><strong>LZ77 编码</strong>：对每个数据块使用 LZ77 算法进行处理，该算法会在数据中查找重复出现的字符串，并将其替换为指向之前出现位置的指针和长度，以此来减少重复数据的存储。例如：<code>&quot;abc123abc456&quot;</code> → <code>&quot;abc123&lt;6,3&gt;456&quot;</code>（<code>&lt;6,3&gt;</code>表示向前 6 个字符开始复制 3 个字符）</li><li><strong>哈夫曼编码</strong>：对经过 LZ77 编码后的数据使用哈夫曼编码，根据字符出现的频率为每个字符分配变长编码，出现频率高的字符使用较短的编码，从而进一步压缩数据。</li><li><strong>添加文件头和校验和</strong>：在压缩后的数据前添加 Gzip 文件头，包含压缩方法、时间戳等信息；在数据末尾添加校验和，用于解压缩时验证数据的完整性。</li><li><strong>输出压缩数据</strong>：将处理好的数据组合成最终的 Gzip 压缩文件。</li></ol><h2 id="解压缩流程" tabindex="-1"><a class="header-anchor" href="#解压缩流程"><span>解压缩流程</span></a></h2><ol><li><strong>读取文件头</strong>：从 Gzip 文件开头读取文件头信息，确认文件格式和压缩方法。</li><li><strong>验证文件格式</strong>：检查文件头信息是否符合 Gzip 格式规范。</li><li><strong>读取压缩数据</strong>：跳过文件头，读取中间的压缩数据部分。</li><li><strong>哈夫曼解码</strong>：对压缩数据进行哈夫曼解码，将变长编码还原为 LZ77 编码后的数据。</li><li><strong>LZ77 解码</strong>：对经过哈夫曼解码后的数据进行 LZ77 解码，根据指针和长度信息还原出原始数据。</li><li><strong>验证校验和</strong>：使用文件末尾的校验和验证解压缩后的数据是否完整。</li><li><strong>输出原始数据</strong>：如果校验通过，输出解压缩后的原始数据。</li></ol><h2 id="主要参数" tabindex="-1"><a class="header-anchor" href="#主要参数"><span>主要参数</span></a></h2><h3 id="压缩级别-1-到-9" tabindex="-1"><a class="header-anchor" href="#压缩级别-1-到-9"><span>压缩级别（-1 到 -9）</span></a></h3><ul><li><strong>-1</strong>：最快压缩，压缩速度最快，但压缩比最低，适合对压缩速度要求高而对压缩比要求不高的场景。</li><li><strong>-9</strong>：最佳压缩，压缩比最高，但压缩速度最慢，适合对压缩比要求高而对压缩速度要求不高的场景。</li><li><strong>-6</strong>：默认压缩级别，在压缩速度和压缩比之间取得较好的平衡。</li></ul><h3 id="递归压缩-r" tabindex="-1"><a class="header-anchor" href="#递归压缩-r"><span>递归压缩（-r）</span></a></h3><p>该参数用于递归地压缩指定目录下的所有文件和子目录中的文件。</p><h3 id="保留原文件-k" tabindex="-1"><a class="header-anchor" href="#保留原文件-k"><span>保留原文件（-k）</span></a></h3><p>默认情况下，Gzip 压缩后会删除原文件。使用 <code>-k</code> 参数可以保留原文件，只生成压缩文件。</p><h3 id="显示压缩信息-v" tabindex="-1"><a class="header-anchor" href="#显示压缩信息-v"><span>显示压缩信息（-v）</span></a></h3><p>使用 <code>-v</code> 参数可以在压缩或解压缩过程中显示详细的压缩信息，如压缩前后的文件大小、压缩比等。</p>',16)])])}const c=r(s,[["render",o]]),d=JSON.parse('{"path":"/article/iir8otql/","title":"Gzip 压缩介绍","lang":"zh-CN","frontmatter":{"title":"Gzip 压缩介绍","createTime":"2025/06/29 00:31:29","permalink":"/article/iir8otql/"},"readingTime":{"minutes":2.87,"words":861},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"前端/Gzip 压缩.md","headers":[],"categoryList":[{"id":"9abfe4","sort":10008,"name":"前端"}],"bulletin":false}');export{c as comp,d as data};
