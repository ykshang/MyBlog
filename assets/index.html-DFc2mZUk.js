import{_ as a,c as s,d as o,o as r}from"./app-Bg7EXfK3.js";const t={};function n(c,e){return r(),s("div",null,[...e[0]||(e[0]=[o('<p><strong>Webpack 的 Resolve 模块解析是用于解析模块路径的配置选项。它可以帮助 Webpack 正确地确定模块的位置。</strong></p><h3 id="resolve-modules-用于指定模块的搜索路径" tabindex="-1"><a class="header-anchor" href="#resolve-modules-用于指定模块的搜索路径"><span><code>resolve.modules</code>：用于指定模块的搜索路径</span></a></h3><p>当 Webpack 在解析导入语句时，它会按照指定的顺序依次查找这些路径来确定模块的位置。默认情况下，Webpack 会在当前工作目录和 node_modules 文件夹中查找。</p><h3 id="resolve-alias-用于创建模块的路径别名" tabindex="-1"><a class="header-anchor" href="#resolve-alias-用于创建模块的路径别名"><span><code>resolve.alias</code>：用于创建模块的路径别名</span></a></h3><p>通过配置别名，可以让 Webpack 在导入模块时使用更简短的路径。这对于减少代码中的冗余路径非常有用。</p><h3 id="resolve-extensions-用于指定可以省略的文件扩展名" tabindex="-1"><a class="header-anchor" href="#resolve-extensions-用于指定可以省略的文件扩展名"><span><code>resolve.extensions</code>：用于指定可以省略的文件扩展名</span></a></h3><p>当导入模块时没有指定文件扩展名时，Webpack 会按照指定的顺序依次尝试添加扩展名来解析模块。这样可以让我们在导入模块时省略掉繁琐的扩展名，提高开发效率。</p><p>通过合理配置这些选项，我们可以让 Webpack 更快地找到模块的位置，并且在导入模块时更加方便简洁。</p>',8)])])}const i=a(t,[["render",n]]),l=JSON.parse('{"path":"/Webpack/zikp3yie/","title":"Resolve 模块解析","lang":"zh-CN","frontmatter":{"title":"Resolve 模块解析","createTime":"2025/03/15 14:24:21","permalink":"/Webpack/zikp3yie/"},"readingTime":{"minutes":0.98,"words":294},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Webpack/1.基础学习/7.Resolve 模块解析.md","headers":[],"bulletin":false}');export{i as comp,l as data};
