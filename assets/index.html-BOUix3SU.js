import{_ as a,c as o,d as r,a as n,b as t,w as s,r as e,o as u}from"./app-Bg7EXfK3.js";const p={},g={class:"vp-steps"};function d(C,l){const i=e("VPCard");return u(),o("div",null,[l[18]||(l[18]=r('<p>CI/CD（持续集成/持续交付）是现代软件开发中的一套实践和工具链，旨在通过自动化流程提高软件交付的效率和质量。以下是 CI/CD 的详细介绍：</p><h2 id="一、定义" tabindex="-1"><a class="header-anchor" href="#一、定义"><span>一、定义</span></a></h2><ul><li><mark>CI</mark>（Continuous Integration，<mark><strong>持续集成</strong></mark>）：开发人员频繁地将代码变更集成到共享的主干分支中，并通过自动化构建和测试验证代码的正确性。</li><li><mark>CD</mark>（Continuous Delivery/Deployment，<mark><strong>持续交付</strong> / <strong>持续部署</strong></mark>）：在持续集成的基础上，自动化地将代码部署到测试环境或生产环境，确保软件可以随时发布。</li></ul><h2 id="二、核心目标" tabindex="-1"><a class="header-anchor" href="#二、核心目标"><span>二、核心目标</span></a></h2><ul><li><strong>提高开发效率</strong>：通过自动化流程减少手动操作，加快开发周期。</li><li><strong>提升代码质量</strong>：通过自动化测试和代码检查，尽早发现并修复问题。</li><li><strong>降低发布风险</strong>：通过频繁的小规模发布，减少大规模发布的风险。</li><li><strong>快速响应需求</strong>：能够快速交付新功能和修复问题，满足用户需求。</li></ul><h2 id="三、主要流程" tabindex="-1"><a class="header-anchor" href="#三、主要流程"><span>三、主要流程</span></a></h2><ol><li><p><strong>持续集成（CI）</strong>：</p><ul><li>开发人员提交代码到版本控制系统（如 Git）。</li><li>触发自动化构建和测试流程。</li><li>如果构建或测试失败，及时通知开发人员修复问题。</li></ul></li><li><p><strong>持续交付（CD）</strong>：</p><ul><li>在持续集成的基础上，将代码自动部署到测试环境。</li><li>进行更全面的测试（如集成测试、性能测试等）。</li><li>确保代码可以随时发布到生产环境。</li></ul></li><li><p><strong>持续部署（CD）</strong>：</p><ul><li>在持续交付的基础上，自动将代码部署到生产环境。</li><li>适用于高度自动化和成熟的团队。</li></ul></li></ol><h2 id="四、常用工具类型" tabindex="-1"><a class="header-anchor" href="#四、常用工具类型"><span>四、常用工具类型</span></a></h2><ul><li><strong>版本控制</strong>：Git、GitHub、GitLab、Bitbucket。</li><li><strong>CI/CD 平台</strong>：Jenkins、GitLab CI/CD、CircleCI、Travis CI、GitHub Actions。</li><li><strong>构建工具</strong>：Maven、Gradle、npm、Webpack。</li><li><strong>测试工具</strong>：JUnit、Selenium、Cypress、Jest。</li><li><strong>容器化</strong>：Docker、Kubernetes。</li><li><strong>配置管理</strong>：Ansible、Chef、Puppet。</li></ul><h2 id="五、示例流程" tabindex="-1"><a class="header-anchor" href="#五、示例流程"><span>五、示例流程</span></a></h2><p>以下是一个典型的 CI/CD 流程：</p>',11)),n("div",g,[n("ol",null,[n("li",null,[l[1]||(l[1]=n("p",null,"代码提交、发起 MR 请求:",-1)),t(i,null,{default:s(()=>[...l[0]||(l[0]=[n("p",null,"开发人员提交代码到 Git 仓库，并向主干库发起 MR 请求。",-1)])]),_:1})]),n("li",null,[l[3]||(l[3]=n("p",null,"平台对代码进行构建检查:",-1)),t(i,null,{default:s(()=>[...l[2]||(l[2]=[n("p",null,"主干仓库收到 MR 请求后，触发构建检查：",-1),n("ol",null,[n("li",null,"拉取最新代码。"),n("li",null,"运行单元测试和代码检查。"),n("li",null,"执行构建任务，检查是否构建成功。")],-1)])]),_:1})]),n("li",null,[l[5]||(l[5]=n("p",null,"代码评审",-1)),t(i,null,{default:s(()=>[...l[4]||(l[4]=[n("p",null,"如果构建检查通过，开发人员联系 Commiter 进行代码评审。",-1)])]),_:1})]),n("li",null,[l[7]||(l[7]=n("p",null,"平台触发 CI 流程：",-1)),t(i,null,{default:s(()=>[...l[6]||(l[6]=[n("p",null,"代码评审通过后，代码合并到主干仓库，平台触发 CI 流程：",-1),n("ol",null,[n("li",null,"拉取最新代码。"),n("li",null,"运行单元测试和代码检查。"),n("li",null,"构建应用程序。")],-1)])]),_:1})]),n("li",null,[l[9]||(l[9]=n("p",null,"触发 CD （持续部署）流程：",-1)),l[10]||(l[10]=n("p",null,"如果 CI 通过，触发 CD （持续部署）流程：",-1)),t(i,null,{default:s(()=>[...l[8]||(l[8]=[n("ol",null,[n("li",null,"将应用程序部署到测试环境。"),n("li",null,"运行集成测试和性能测试。")],-1)])]),_:1})]),n("li",null,[l[12]||(l[12]=n("p",null,"人工测试：",-1)),t(i,null,{default:s(()=>[...l[11]||(l[11]=[n("p",null,"测试人员对应用程序的关键用例、运行性能等方面进行测试。",-1)])]),_:1})]),n("li",null,[l[14]||(l[14]=n("p",null,"触发持续部署：",-1)),t(i,null,{default:s(()=>[...l[13]||(l[13]=[n("p",null,"如果测试通过，触发持续部署：将应用程序部署到生产环境。",-1)])]),_:1})]),n("li",null,[l[16]||(l[16]=n("p",null,"持续监控和反馈：",-1)),t(i,null,{default:s(()=>[...l[15]||(l[15]=[n("p",null,"监控应用程序的性能和健康状态，反馈问题和 Bug。",-1)])]),_:1})]),l[17]||(l[17]=n("li",null,[n("p",null,"结束")],-1))])]),l[19]||(l[19]=r('<h2 id="六、优势" tabindex="-1"><a class="header-anchor" href="#六、优势"><span>六、优势</span></a></h2><ul><li><strong>快速反馈</strong>：开发人员可以快速了解代码变更的影响。</li><li><strong>减少手动操作</strong>：自动化流程减少了人为错误。</li><li><strong>提高发布频率</strong>：支持频繁的小规模发布，降低发布风险。</li><li><strong>增强团队协作</strong>：通过共享的代码库和自动化流程，提升团队协作效率。</li></ul><h2 id="七、挑战" tabindex="-1"><a class="header-anchor" href="#七、挑战"><span>七、挑战</span></a></h2><ul><li><strong>初始配置复杂</strong>：需要投入时间和资源搭建 CI/CD 流水线。</li><li><strong>测试覆盖率要求高</strong>：自动化测试需要覆盖大部分功能，否则无法保证质量。</li><li><strong>文化转变</strong>：需要团队接受频繁集成和发布的开发模式。</li></ul><h2 id="八、总结" tabindex="-1"><a class="header-anchor" href="#八、总结"><span>八、总结</span></a></h2><p>CI/CD 是现代软件开发的核心实践，通过自动化流程显著提高了软件交付的效率和质量。它不仅是技术工具链的集成，更是一种开发文化和流程的优化。通过合理使用 CI/CD，团队可以更快地响应需求变化，降低发布风险，提升用户满意度。</p>',6))])}const f=a(p,[["render",d]]),b=JSON.parse('{"path":"/ClassicFrontInterview/pueemm5m/","title":"什么是 CI/CD？","lang":"zh-CN","frontmatter":{"title":"什么是 CI/CD？","createTime":"2025/03/15 14:24:59","permalink":"/ClassicFrontInterview/pueemm5m/"},"readingTime":{"minutes":3.68,"words":1104},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/ClassicFrontInterview/2.大前端相关/6.什么是 CICD？.md","headers":[],"bulletin":false}');export{f as comp,b as data};
