import{_ as n,c as e,d as i,b as h,r as l,o as t}from"./app-Bg7EXfK3.js";const k={};function p(d,s){const a=l("Mermaid");return t(),e("div",null,[s[0]||(s[0]=i(`<p>以下是 Webpack 构建的完整流程的深度解析，涵盖从启动到输出的每个关键环节及其底层机制：</p><h2 id="一、初始化阶段" tabindex="-1"><a class="header-anchor" href="#一、初始化阶段"><span>一、初始化阶段</span></a></h2><h3 id="_1、配置准备" tabindex="-1"><a class="header-anchor" href="#_1、配置准备"><span>1、配置准备</span></a></h3><ul><li><strong>多来源合并</strong>：合并 CLI 参数 (<code>--mode=production</code>)、配置文件 (<code>webpack.config.js</code>) 和默认配置</li><li><strong>环境变量注入</strong>：通过 <code>DefinePlugin</code> 替换 <code>process.env.NODE_ENV</code></li><li><strong>配置验证</strong>：校验 <code>entry</code>/<code>output</code>/<code>loader</code> 等关键配置的合法性</li></ul><h3 id="_2、核心对象实例化" tabindex="-1"><a class="header-anchor" href="#_2、核心对象实例化"><span>2、核心对象实例化</span></a></h3><h4 id="compiler-环境配置" tabindex="-1"><a class="header-anchor" href="#compiler-环境配置"><span>Compiler（环境配置）</span></a></h4><ul><li>继承 <code>Tapable</code>，管理 40+ 个生命周期钩子（如 <code>beforeRun</code>/<code>compile</code>/<code>emit</code>）</li><li>持有完整的配置信息 <code>this.options</code></li></ul><h4 id="compilation-单次构建上下文" tabindex="-1"><a class="header-anchor" href="#compilation-单次构建上下文"><span>Compilation（单次构建上下文）</span></a></h4><ul><li>存储模块依赖图、Chunk 关系、生成的 assets</li><li>每次构建（包括 watch 模式下的增量构建）都会创建新实例</li></ul><h3 id="_3、插件系统初始化" tabindex="-1"><a class="header-anchor" href="#_3、插件系统初始化"><span>3、插件系统初始化</span></a></h3><h4 id="执行顺序" tabindex="-1"><a class="header-anchor" href="#执行顺序"><span>执行顺序</span></a></h4><p>按配置数组顺序同步调用各插件的 <code>apply</code> 方法</p><h4 id="钩子类型" tabindex="-1"><a class="header-anchor" href="#钩子类型"><span>钩子类型</span></a></h4><ul><li><code>SyncHook</code>（同步）</li><li><code>AsyncSeriesHook</code>（异步串行）</li><li><code>AsyncParallelHook</code>（异步并行）</li></ul><h4 id="钩子示例" tabindex="-1"><a class="header-anchor" href="#钩子示例"><span>钩子示例</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 插件注册示例</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyPlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  apply</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">compiler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    compiler</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hooks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">done</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">tap</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">MyPlugin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">stats</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">构建完成！</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、编译阶段-构建模块依赖图" tabindex="-1"><a class="header-anchor" href="#二、编译阶段-构建模块依赖图"><span>二、编译阶段（构建模块依赖图）</span></a></h2><h3 id="_1、入口解析" tabindex="-1"><a class="header-anchor" href="#_1、入口解析"><span>1、入口解析</span></a></h3><h4 id="路径解析规则" tabindex="-1"><a class="header-anchor" href="#路径解析规则"><span>路径解析规则</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  extensions</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.ts</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 自动补全后缀</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  alias</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">src</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> },</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 路径别名</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  modules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">node_modules</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 模块搜索目录</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态入口支持" tabindex="-1"><a class="header-anchor" href="#动态入口支持"><span>动态入口支持</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">entry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./src/main.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2、递归构建依赖树" tabindex="-1"><a class="header-anchor" href="#_2、递归构建依赖树"><span>2、递归构建依赖树</span></a></h3><ul><li><strong>循环检测</strong>：避免循环引用导致无限递归</li><li><strong>并行加载</strong>：通过 <code>asyncLib</code> 库实现异步并发处理</li></ul><h3 id="_3、模块处理流水线" tabindex="-1"><a class="header-anchor" href="#_3、模块处理流水线"><span>3、模块处理流水线</span></a></h3>`,25)),h(a,{code:"eJxLL0osyFDwCeJSUHCMDkotzs8pSy2KVdDVtVNwivbJT0xJLVIIKs3Lgwk6RwckFhXDeC7RT/bNfbF12rMp217ObovlAgD2ZBzz"}),s[1]||(s[1]=i(`<h4 id="关键步骤" tabindex="-1"><a class="header-anchor" href="#关键步骤"><span>关键步骤</span></a></h4><ol><li><strong>Resolver</strong>： <ul><li>使用 <code>enhanced-resolve</code> 定位模块绝对路径</li></ul></li><li><strong>Loader 执行</strong>： <ul><li><strong>Pitch 阶段</strong>：从右到左执行 <code>loader.pitch()</code></li><li><strong>Normal 阶段</strong>：从左到右执行 <code>loader()</code></li><li><strong>数据流</strong>：支持链式传递（前一个 loader 的结果是下一个的输入）</li></ul></li><li><strong>AST 解析</strong>： <ul><li>使用 <code>acorn</code> 生成 AST</li><li>识别 <code>import/require</code> 语句收集依赖</li></ul></li><li><strong>模块实例化</strong>： <ul><li>包含源码、依赖数组、hash 等元信息</li><li>缓存到 <code>compilation.modules</code> 中</li></ul></li></ol><h2 id="三、优化阶段-代码加工" tabindex="-1"><a class="header-anchor" href="#三、优化阶段-代码加工"><span>三、优化阶段（代码加工）</span></a></h2><h3 id="_1、chunk-生成" tabindex="-1"><a class="header-anchor" href="#_1、chunk-生成"><span>1、Chunk 生成</span></a></h3><h4 id="分组策略" tabindex="-1"><a class="header-anchor" href="#分组策略"><span>分组策略</span></a></h4><ul><li>初始 Chunk（entry 直接引用）</li><li>异步 Chunk（<code>import()</code> 动态加载）</li><li>Runtime Chunk（Webpack 运行时代码）</li></ul><h4 id="代码分割" tabindex="-1"><a class="header-anchor" href="#代码分割"><span>代码分割</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">optimization</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  splitChunks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    chunks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">all</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    minSize</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    cacheGroups</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      vendors</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">node_modules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        priority</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> -</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">10</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、高级优化" tabindex="-1"><a class="header-anchor" href="#_2、高级优化"><span>2、高级优化</span></a></h3><h4 id="tree-shaking" tabindex="-1"><a class="header-anchor" href="#tree-shaking"><span>Tree Shaking</span></a></h4><ol><li>标记未使用的 <code>export</code>（通过 <code>SideEffectsFlagPlugin</code>）</li><li>使用 <code>TerserPlugin</code> 删除死代码</li></ol><h4 id="scope-hoisting" tabindex="-1"><a class="header-anchor" href="#scope-hoisting"><span>Scope Hoisting</span></a></h4><ul><li>将模块合并到单一函数作用域</li><li>减少闭包数量提升运行性能</li></ul><h3 id="_3-插件优化介入" tabindex="-1"><a class="header-anchor" href="#_3-插件优化介入"><span>3. 插件优化介入</span></a></h3><h4 id="时机钩子" tabindex="-1"><a class="header-anchor" href="#时机钩子"><span>时机钩子</span></a></h4><ul><li><code>optimizeChunks</code>：修改 Chunk 分组</li><li><code>optimizeModules</code>：修改模块内容</li><li><code>afterOptimizeTree</code>：优化完成后</li></ul><h2 id="四、生成阶段-输出结果" tabindex="-1"><a class="header-anchor" href="#四、生成阶段-输出结果"><span>四、生成阶段（输出结果）</span></a></h2><h3 id="_1-模板渲染" tabindex="-1"><a class="header-anchor" href="#_1-模板渲染"><span>1. 模板渲染</span></a></h3><h4 id="模板类型" tabindex="-1"><a class="header-anchor" href="#模板类型"><span>模板类型</span></a></h4><ul><li><code>MainTemplate</code>：处理入口 Chunk</li><li><code>ChunkTemplate</code>：处理普通 Chunk</li><li><code>RuntimeTemplate</code>：生成运行时代码</li></ul><h4 id="渲染流程" tabindex="-1"><a class="header-anchor" href="#渲染流程"><span>渲染流程</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 伪代码示例</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> chunk</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> of</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> chunks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">chunk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  assets</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">chunk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> source</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-资源生成" tabindex="-1"><a class="header-anchor" href="#_2-资源生成"><span>2. 资源生成</span></a></h3><h4 id="文件-hash" tabindex="-1"><a class="header-anchor" href="#文件-hash"><span>文件 Hash</span></a></h4><ul><li><code>[contenthash]</code>：基于文件内容生成</li><li><code>[chunkhash]</code>：基于 Chunk 内容生成</li></ul><h4 id="sourcemap" tabindex="-1"><a class="header-anchor" href="#sourcemap"><span>SourceMap</span></a></h4><ul><li>通过 <code>devtool</code> 配置生成策略（如 <code>source-map</code>/<code>eval-cheap-source-map</code>）</li></ul><h3 id="_3-写入磁盘" tabindex="-1"><a class="header-anchor" href="#_3-写入磁盘"><span>3. 写入磁盘</span></a></h3><h4 id="输出前钩子" tabindex="-1"><a class="header-anchor" href="#输出前钩子"><span>输出前钩子</span></a></h4><ul><li><code>emit</code>：最后修改 assets 的机会</li><li><code>afterEmit</code>：文件已写入磁盘</li></ul><h4 id="文件系统交互" tabindex="-1"><a class="header-anchor" href="#文件系统交互"><span>文件系统交互</span></a></h4><ul><li>开发模式使用内存文件系统 (<code>memfs</code>)</li><li>生产模式直接写入物理磁盘</li></ul><h2 id="五、收尾阶段" tabindex="-1"><a class="header-anchor" href="#五、收尾阶段"><span>五、收尾阶段</span></a></h2><h3 id="_1-统计信息生成" tabindex="-1"><a class="header-anchor" href="#_1-统计信息生成"><span>1. 统计信息生成</span></a></h3><h4 id="metrics-收集" tabindex="-1"><a class="header-anchor" href="#metrics-收集"><span>Metrics 收集</span></a></h4><ul><li>构建时间</li><li>Chunk 大小分布</li><li>模块数量统计</li></ul><h4 id="自定义报告" tabindex="-1"><a class="header-anchor" href="#自定义报告"><span>自定义报告</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">stats</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  colors</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  modules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、清理工作" tabindex="-1"><a class="header-anchor" href="#_2、清理工作"><span>2、清理工作</span></a></h3><ul><li><strong>临时文件清理</strong>：如删除旧的缓存文件</li><li><strong>内存释放</strong>：清除不再使用的数据结构</li></ul><h3 id="_3、回调通知" tabindex="-1"><a class="header-anchor" href="#_3、回调通知"><span>3、回调通知</span></a></h3><ul><li><strong>用户回调</strong>：执行配置中的 <code>callback(err, stats)</code></li><li><strong>Watch 模式</strong>：准备接收文件变化事件</li></ul><h2 id="六、高级流程-附加场景" tabindex="-1"><a class="header-anchor" href="#六、高级流程-附加场景"><span>六、高级流程（附加场景）</span></a></h2><h3 id="_1-watch-模式" tabindex="-1"><a class="header-anchor" href="#_1-watch-模式"><span>1. Watch 模式</span></a></h3><h4 id="文件监听" tabindex="-1"><a class="header-anchor" href="#文件监听"><span>文件监听</span></a></h4><ul><li>基于 <code>chokidar</code> 库实现</li><li>配置 <code>watchOptions.poll</code> 可轮询检测</li></ul><h4 id="增量构建" tabindex="-1"><a class="header-anchor" href="#增量构建"><span>增量构建</span></a></h4><ul><li>复用未变更模块的缓存</li><li>仅重新构建受影响的部分</li></ul><h3 id="_2、hmr-热更新" tabindex="-1"><a class="header-anchor" href="#_2、hmr-热更新"><span>2、HMR 热更新</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// HMR 运行时逻辑</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hot</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">accept</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./module.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 模块更新后的回调</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="通信流程" tabindex="-1"><a class="header-anchor" href="#通信流程"><span>通信流程</span></a></h4><ol><li>WebSocket 接收 hash 通知</li><li>下载更新的 manifest 和 chunk</li><li>执行模块替换逻辑</li></ol><h3 id="_3、持久化缓存" tabindex="-1"><a class="header-anchor" href="#_3、持久化缓存"><span>3、持久化缓存</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cache</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">filesystem</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 缓存版本标识</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="缓存级别" tabindex="-1"><a class="header-anchor" href="#缓存级别"><span>缓存级别</span></a></h4><ul><li>模块解析结果</li><li>Chunk 生成结果</li><li>构建环境快照</li></ul><h2 id="关键设计思想" tabindex="-1"><a class="header-anchor" href="#关键设计思想"><span>关键设计思想</span></a></h2><ol><li><strong>事件驱动架构</strong>：通过 Tapable 实现插件系统</li><li><strong>一切皆模块</strong>：JS/CSS/图片等统一处理</li><li><strong>依赖即资源</strong>：通过 AST 静态分析建立依赖图</li><li><strong>增量处理</strong>：缓存 + 依赖追踪实现高效 rebuild</li></ol><p>理解完整流程后，可以更精准地：</p><ul><li>优化构建性能（如配置缓存、并行处理）</li><li>编写高效 Loader/Plugin</li><li>调试构建问题（通过 <code>stats</code> 或 <code>profiling</code>）</li></ul>`,60))])}const c=n(k,[["render",p]]),g=JSON.parse('{"path":"/Webpack/m093wfd5/","title":"Webpack 构建流程","lang":"zh-CN","frontmatter":{"title":"Webpack 构建流程","createTime":"2025/06/17 10:29:26","permalink":"/Webpack/m093wfd5/"},"readingTime":{"minutes":3.96,"words":1189},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Webpack/1.基础学习/3.Webpack 构建流程.md","headers":[],"bulletin":false}');export{c as comp,g as data};
