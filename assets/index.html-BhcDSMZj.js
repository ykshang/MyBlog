import{_ as t,c as n,d as a,a as i,e as h,b as l,r as p,o as r}from"./app-Bg7EXfK3.js";const k={},d={id:"三、手动处理",tabindex:"-1"},o={class:"header-anchor",href:"#三、手动处理"};function c(g,s){const e=p("Badge");return r(),n("div",null,[s[1]||(s[1]=a('<div class="hint-container tip"><p class="hint-container-title">总结</p><p>多数情况下，我们推荐使用<strong>代理</strong>。</p><p><strong>本地开发环境使用正向代理，部署到服务器生产环境使用反向代理。</strong></p><p><strong>不推荐手动处理</strong>，手动处理可能涉及到重新走一遍版本发布流程。比较费时间</p></div><p>跨域请求是指在浏览器中，从一个域名的网页去请求另一个域名的资源。跨域请求是受到浏览器的同源策略（Same Origin Policy）限制的，该策略要求浏览器只能发送同源（协议、域名、端口号相同）的请求。</p><p>一般在 Node.js 中解决这类跨域问题，有以下三个思路：</p><h2 id="一、正向代理" tabindex="-1"><a class="header-anchor" href="#一、正向代理"><span>一、正向代理</span></a></h2><p><strong>正向代理就是通过配置 proxy，实现请求被代理转发</strong></p><p>正向代理指的是在客户端架设代理，该代理和客户端同域名同端口，属于同源。而代理和服务端之间不存在同源策略限制，即不存在跨域问题。大多数情况下，我们会使用中间件<code>proxy</code>、<code>http-proxy-middleware</code>来架设代理，同时在代码中将接口的请求地址改为该代理的地址和端口来帮我们解决这个问题。</p><p>有些前端工程内置了一些 proxy 配置，我们可以启动该配置来</p><p><strong>一般来说主要用两种情况：</strong></p><ul><li>前端工程代码：未编译的前端代码直接通过<code>npm run env</code>命令直接在服务器上启动，代理直接运行在该服务上。</li><li>静态资源代码：指的是编译后的静态代码或者非工程代码，使用<code>app.use(express.static(path.join(__dirname, &#39;public&#39;)))</code> 托管运行</li></ul><h2 id="二、反向代理" tabindex="-1"><a class="header-anchor" href="#二、反向代理"><span>二、反向代理</span></a></h2><p><strong>反向代理实质就是反向代理服务器在响应头里添加 CORS 信息</strong></p><p>反向代理是指以代理服务器来接收客户端的请求，然后将请求转发给内部网络上的服务器，将从服务器上得到的结果返回给客户端，此时代理服务器对外表现为一个反向代理服务器。对于客户端来说，反向代理就相当于目标服务器，只需要将反向代理当作目标服务器一样发送请求就可以了，并且客户端不需要进行任何设置。一般我们会在服务端给接口的响应头配置<code>CORS</code>信息。</p><p><strong>主要分为这几种情况：</strong></p><ul><li>代理服务器：比如我们可以通过配置 <code>Nginx</code> 服务服务器，自动的给接口的响应报文添加 <code>CORS</code> 信息</li><li>Node.js：我们可以在响应报文里手动添加，也可以应用一些中间件如 <code>CORS</code> 来处理。</li><li>其他：比如 java 的 <code>apache服务器</code></li></ul><p>大多数情况下，我们推荐使用<code>Nginx</code>和<code>Node.js中间件</code>来解决</p>',15)),i("h2",d,[i("a",o,[i("span",null,[s[0]||(s[0]=h("三、手动处理 ",-1)),l(e,{type:"warning",text:"不推荐"})])])]),s[2]||(s[2]=a(`<p>手动处理指的是：在后端代码的响应报文里手动后添加 CORS 信息，但是一般不推荐这样做，因为修改可能涉及到重新编译代码，重新部署。</p><p>在接口的响应报文 <code>HttpServletResponse</code> 对象里手动添加 CORS 信息。</p><p>以<code>Java</code>为例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> doGet</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">HttpServletRequest request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> HttpServletResponse response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> throws ServletException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> IOException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setHeader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Access-Control-Allow-Origin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">http://foo.example</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setHeader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Access-Control-Allow-Methods</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">POST, GET, OPTIONS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  response</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setHeader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Access-Control-Allow-Headers</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">X-PINGOTHER, Content-Type</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4))])}const A=t(k,[["render",c]]),u=JSON.parse('{"path":"/ClassicFrontInterview/aoqi4grh/","title":"正向代理、反向代理","lang":"zh-CN","frontmatter":{"title":"正向代理、反向代理","createTime":"2025/03/11 23:03:51","permalink":"/ClassicFrontInterview/aoqi4grh/"},"readingTime":{"minutes":2.88,"words":863},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/ClassicFrontInterview/1.乱七八糟/正向代理、反向代理.md","headers":[],"bulletin":false}');export{A as comp,u as data};
