import{_ as i,c as a,d as t,o as n}from"./app-Bg7EXfK3.js";const l={};function e(h,s){return n(),a("div",null,[...s[0]||(s[0]=[t(`<p><code>.mjs</code> 是 JavaScript 的模块文件扩展名，代表&quot;Module JavaScript&quot;，是 ECMAScript 模块(ESM)的官方文件扩展名。</p><h2 id="主要特点" tabindex="-1"><a class="header-anchor" href="#主要特点"><span>主要特点</span></a></h2><ol><li><strong>ES 模块标准</strong>：严格遵循 ECMAScript 模块规范</li><li><strong>明确区分</strong>：与传统的.js 文件形成明显区别</li><li><strong>静态解析</strong>：模块依赖关系在代码执行前就已确定</li><li><strong>严格模式</strong>：默认启用严格模式</li></ol><h2 id="与普通-js-文件的区别" tabindex="-1"><a class="header-anchor" href="#与普通-js-文件的区别"><span>与普通.js 文件的区别</span></a></h2><table><thead><tr><th>特性</th><th>.mjs 文件</th><th>普通.js 文件</th></tr></thead><tbody><tr><td>模块类型</td><td>始终被视为 ES 模块</td><td>取决于 <code>package.json</code> 或扩展名</td></tr><tr><td>导入/导出</td><td>必须使用 <code>import/export</code></td><td>可以使用 <code>require/module.exports</code></td></tr><tr><td>严格模式</td><td>默认启用</td><td>需要手动启用</td></tr><tr><td>文件扩展名</td><td><code>.mjs</code></td><td><code>.js</code></td></tr></tbody></table><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><ol><li><strong>Node.js 中的 ES 模块</strong>：在 Node.js 环境中明确表示这是 ES 模块</li><li><strong>浏览器原生模块</strong>：现代浏览器可以直接加载.mjs 模块</li><li><strong>工具链开发</strong>：构建工具和转译器可以更明确地处理模块</li></ol><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码"><span>示例代码</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// math.mjs</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">export</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3.14159</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// app.mjs</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> PI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> from</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./math.mjs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">add</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出: 5</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">PI</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出: 3.14159</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置与使用" tabindex="-1"><a class="header-anchor" href="#配置与使用"><span>配置与使用</span></a></h2><ol><li><p><strong>Node.js 中使用</strong>：</p><ul><li>在 package.json 中添加 <code>&quot;type&quot;: &quot;module&quot;</code></li><li>或直接使用.mjs 扩展名</li></ul></li><li><p><strong>浏览器中使用</strong>：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">module</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> src</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">module.mjs</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">script</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ol><li>不是所有环境都原生支持.mjs 文件</li><li>某些旧工具链可能需要额外配置才能处理.mjs</li><li>模块路径必须包含完整扩展名(不能省略.mjs)</li><li>与 CommonJS 模块互操作时需要注意差异</li></ol><p><code>.mjs</code> 扩展名的引入主要是为了解决 JavaScript 生态中长期存在的模块系统混乱问题，为 ES 模块提供明确的标识。</p>`,14)])])}const d=i(l,[["render",e]]),p=JSON.parse('{"path":"/article/ztjpbb4h/","title":"文件格式 mjs","lang":"zh-CN","frontmatter":{"title":"文件格式 mjs","createTime":"2025/06/13 17:50:10","permalink":"/article/ztjpbb4h/","tags":["模块化"]},"readingTime":{"minutes":1.52,"words":457},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"前端/mjs格式的文件.md","headers":[],"categoryList":[{"id":"9abfe4","sort":10008,"name":"前端"}],"bulletin":false}');export{d as comp,p as data};
