import{_ as e,c as t,d as r,o}from"./app-Bg7EXfK3.js";const n={};function s(i,a){return o(),t("div",null,[...a[0]||(a[0]=[r("<p>垃圾回收（Garbage Collection）是一种<strong>自动的内存管理机制</strong>，用于检测和释放程序中不再使用的对象所占用的内存空间。垃圾回收器负责处理堆中的不再使用的对象。</p><p>在 JavaScript 中，大多数浏览器和 JavaScript 引擎使用的垃圾回收器是基于&quot;标记-清除&quot;（Mark and Sweep）算法的变种。</p><p>下面是垃圾回收的基本工作流程：</p><ol><li><strong>标记阶段</strong>（Marking Phase）：垃圾回收器会从一个或多个根对象（如全局对象、执行栈中的变量等）开始，递归地遍历堆中的对象，并对可达的对象进行标记。可达对象是指可以通过根对象直接或间接访问到的对象。</li><li><strong>清除阶段</strong>（Sweeping Phase）：在标记阶段完成后，垃圾回收器会遍历整个堆，找到未被标记的对象，这些对象被认为是不再使用的。垃圾回收器会将这些未标记的对象所占用的内存空间释放回给操作系统或内存池，使其可以被再次使用。</li><li><strong>压缩阶段</strong>（Compacting Phase）（可选）：某些垃圾回收器还可能包含一个压缩阶段，用于进一步优化内存空间的利用。在此阶段，垃圾回收器会将存活的对象向堆的一端移动，以便在堆的另一端形成一块连续的可用内存空间。</li></ol><p>需要注意的是，垃圾回收器的工作是自动进行的，开发人员无需显式地进行内存管理。垃圾回收器会周期性地运行，并在程序执行过程中进行内存回收，以确保不再使用的对象被正确释放。</p><p>垃圾回收器的性能和效率在不同的环境和实现中可能会有所差异。因此，编写具有高性能和内存使用效率的 JavaScript 代码时，可以考虑一些最佳实践，如避免创建不必要的临时对象、清理不再使用的事件监听器等，以帮助垃圾回收器更好地管理内存。</p>",6)])])}const l=e(n,[["render",s]]),p=JSON.parse('{"path":"/Browser/uvf9etji/","title":"垃圾回收是如何处理堆中的不再使用的对象的？","lang":"zh-CN","frontmatter":{"title":"垃圾回收是如何处理堆中的不再使用的对象的？","createTime":"2025/03/15 13:21:27","permalink":"/Browser/uvf9etji/"},"readingTime":{"minutes":1.99,"words":597},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Browser/浏览器相关/23.垃圾回收是如何处理堆中的不再使用的对象的？.md","headers":[],"bulletin":false}');export{l as comp,p as data};
