import{_ as i,c as a,d as e,o as n}from"./app-Bg7EXfK3.js";const l={};function t(h,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<p>在 JavaScript 中，函数作用域和块级作用域是两种不同的作用域概念。</p><h2 id="一、函数作用域" tabindex="-1"><a class="header-anchor" href="#一、函数作用域"><span>一、函数作用域</span></a></h2><p>函数作用域指的是在函数内部声明的变量只在<mark>函数内部可见</mark>，并且在函数外部是不可访问的。这意味着函数作用域中的变量对于函数内部是局部变量，其他函数或全局作用域无法访问。</p><p>以下是一个函数作用域的示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sayHello</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出：Hello!</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">message</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 报错：message is not defined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>message</code> 变量在 <code>sayHello</code> 函数内部声明，并且只能在函数内部访问。当函数被调用时，打印了 <code>message</code> 的值。但在函数外部的 <code>console.log(message)</code> 中，<code>message</code> 变量是不可见的，会导致报错。</p><h2 id="二、块级作用域" tabindex="-1"><a class="header-anchor" href="#二、块级作用域"><span>二、块级作用域</span></a></h2><p>块级作用域指的是在 <strong>代码块内</strong> <code>{}</code>声明的变量只在该<mark>块内 <code>{}</code> 可见</mark>，并且在块外部是不可访问的。</p><p>在 JavaScript 早期版本中，<strong>只有函数作用域，没有块级作用域</strong>。 但是，从 ES6（ECMAScript 2015）开始，引入了 <code>let</code> 和 <code>const</code> 关键字，使得块级作用域成为可能。</p><p>以下是一个块级作用域的示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> sayGreeting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> greeting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello!</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">greeting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">greeting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 报错：greeting is not defined</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sayGreeting</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出：Hello!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>greeting</code> 变量在 <code>if</code> 代码块内部使用 <code>let</code> 关键字声明。因为 <code>let</code> 声明的变量具有块级作用域，所以 <code>greeting</code> 变量只在 <code>if</code> 代码块内部可见。在块外部无法访问 <code>greeting</code> 变量，会导致报错。</p><h2 id="三、区别总结" tabindex="-1"><a class="header-anchor" href="#三、区别总结"><span>三、区别总结</span></a></h2><ul><li>函数作用域是在函数内部声明的变量只在函数内部可见，而块级作用域是在代码块内部声明的变量只在该块内部可见。</li><li>函数作用域是使用 <code>function</code> 关键字创建函数时自动生成的，块级作用域是通过 <code>{}</code> 创建的代码块实现的。</li><li>块级作用域引入了 <code>let</code> 和 <code>const</code> 关键字来实现，而函数作用域不依赖这些特殊关键字。</li></ul><p>需要注意的是，在 JavaScript 中，<code>var</code> 关键字声明的变量具有函数作用域，而不是块级作用域。因此，使用 <code>var</code> 声明的变量在包含它的函数内部都是可见的。</p>`,15)])])}const p=i(l,[["render",t]]),d=JSON.parse('{"path":"/Javascript/yb3yheii/","title":"块级作用域、函数作用域","lang":"zh-CN","frontmatter":{"title":"块级作用域、函数作用域","createTime":"2025/03/12 17:19:50","permalink":"/Javascript/yb3yheii/"},"readingTime":{"minutes":2.03,"words":608},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Javascript/1.基础知识/7.块级作用域、函数作用域.md","headers":[],"bulletin":false}');export{p as comp,d as data};
