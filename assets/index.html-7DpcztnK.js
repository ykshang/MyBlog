import{_ as i,c as a,d as n,o as h}from"./app-Bg7EXfK3.js";const e={};function l(t,s){return h(),a("div",null,[...s[0]||(s[0]=[n(`<h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p><strong>Webpack 文件指纹（File Fingerprinting）</strong> 是一种用于解决浏览器缓存问题的技术。通过为文件名添加唯一的 <mark><strong>哈希值（hash）</strong></mark>，可以确保文件内容发生变化时，文件名也会随之改变，从而强制浏览器重新加载最新的文件，而不是使用缓存中的旧版本。</p><p>通过合理使用文件指纹，可以有效管理浏览器缓存，提升应用的加载性能。</p><h2 id="二、内置生成策略" tabindex="-1"><a class="header-anchor" href="#二、内置生成策略"><span>二、内置生成策略</span></a></h2><p>Webpack 内置了三种生成策略，用于解决浏览器缓存与代码更新冲突问题。</p><h3 id="_1、hash" tabindex="-1"><a class="header-anchor" href="#_1、hash"><span>1、<code>hash</code></span></a></h3><p><code>[hash]</code> 是 Webpack 提供的一种内置策略，用于生成项目整体的哈希值。</p><p>任何文件变化都会导致所有文件哈希值变化，会导致所有文件缓存失效，影响性能。</p><p>Webpack 5 已默认弃用 <code>hash</code>，推荐使用 <code>chunkhash</code> 或 <code>contenthash</code>。</p><h3 id="_2、chunkhash" tabindex="-1"><a class="header-anchor" href="#_2、chunkhash"><span>2、<code>chunkhash</code></span></a></h3><p><code>[chunkhash]</code> 是 Webpack 提供的另一种内置策略，用于生成每个入口文件（<code>chunk</code>）的哈希值。</p><p><code>chunk</code> 内容发生变化，对应输出文件的哈希值变化。比较推荐用于 JS 文件，因为 JS 文件是入口文件，依赖链比较长。</p><h3 id="_3、contenthash" tabindex="-1"><a class="header-anchor" href="#_3、contenthash"><span>3、<code>contenthash</code></span></a></h3><p><code>[contenthash]</code> 是 Webpack 提供的另一种内置策略，用于根据文件内容生成哈希值。</p><p>文件内容发生变化，触发相关输出文件哈希值变化。适用于图片/字体/CSS 等静态资源。</p><p><code>contenthash</code> 与 <code>chunkhash</code> 不同，仅针对文件内容变化进行哈希值计算，不会因为其他文件变化而变化。</p><p><code>contenthash</code> 是目前比较推荐的方案。</p><h3 id="_4、三者对比" tabindex="-1"><a class="header-anchor" href="#_4、三者对比"><span>4、三者对比</span></a></h3><h4 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围"><span>影响范围</span></a></h4><p>以下是发生文件修改时，引起 Hash 变化的范围对比：</p><table><thead><tr><th>修改文件类型</th><th>chunkhash</th><th>contenthash</th></tr></thead><tbody><tr><td>JS</td><td>所有依赖链文件变化</td><td>仅修改的文件变化</td></tr><tr><td>CSS</td><td>所有文件不变</td><td>仅修改的文件变化</td></tr><tr><td>图片</td><td>所有文件不变</td><td>仅修改的文件变化</td></tr></tbody></table><h5 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h5><p>综合发现，指纹生成策略越精细时，增量构建的变化范围也越小，意味着对缓存的影响越小，但同时构建速度也越慢。</p><table><thead><tr><th>‌<strong>策略</strong>‌</th><th>构建速度</th><th>缓存命中率</th><th>首屏加载时间</th></tr></thead><tbody><tr><td>hash</td><td>1.8s</td><td>38%</td><td>2.4s</td></tr><tr><td>chunkhash</td><td>2.1s</td><td>67%</td><td>1.9s</td></tr><tr><td>contenthash</td><td>2.3s</td><td>92%</td><td>1.2s</td></tr></tbody></table><h2 id="三、如何生成" tabindex="-1"><a class="header-anchor" href="#三、如何生成"><span>三、如何生成</span></a></h2><p>Webpack 生成文件指纹的过程可以简化为以下关键步骤：</p><h3 id="_1、内容准备阶段" tabindex="-1"><a class="header-anchor" href="#_1、内容准备阶段"><span>1、内容准备阶段</span></a></h3><ul><li>收集目标文件的所有内容（包括代码和依赖关系）</li><li>对模块内容进行标准化处理（移除空格/注释等不影响功能的差异）</li></ul><h3 id="_2、哈希计算阶段" tabindex="-1"><a class="header-anchor" href="#_2、哈希计算阶段"><span>2、哈希计算阶段</span></a></h3><p>提取文件特征计算哈希值</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 简化的哈希计算逻辑</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> crypto</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">crypto</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> generateHash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> crypto</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">createHash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">md5</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 使用MD5算法</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">update</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输入内容</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">digest</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">hex</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 输出16进制格式</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    .</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">substring</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 取前8位作为短哈希</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、输出应用阶段" tabindex="-1"><a class="header-anchor" href="#_3、输出应用阶段"><span>3、输出应用阶段</span></a></h3><ul><li>将生成的哈希插入文件名：<code>main.[hash].js</code> → <code>main.a1b2c3d4.js</code></li><li>不同哈希类型区别： <ul><li><code>[hash]</code>：基于整个构建</li><li><code>[chunkhash]</code>：基于代码块内容</li><li><code>[contenthash]</code>：基于文件完整内容</li></ul></li></ul><h2 id="四、具体配置" tabindex="-1"><a class="header-anchor" href="#四、具体配置"><span>四、具体配置</span></a></h2><h3 id="_1、配置建议" tabindex="-1"><a class="header-anchor" href="#_1、配置建议"><span>1、配置建议</span></a></h3><ul><li>所有静态资源统一使用 <code>contenthash</code></li><li>JS 入口文件可搭配 <code>runtimeChunk</code> 使用</li><li>禁用 <code>hash</code>（Webpack 5 已默认弃用）</li></ul><div class="hint-container tip"><p class="hint-container-title">为什么推荐 contenthash？‌</p><ul><li>‌<strong>精准缓存控制</strong>‌：单个文件变更不影响其他资源哈希</li><li>‌<strong>CDN 友好</strong>‌：内容变化时自动刷新 CDN 缓存</li><li>‌<strong>Tree-shaking 安全</strong>‌：避免因哈希连锁变化导致的冗余代码</li></ul></div><h3 id="_2、完整示例" tabindex="-1"><a class="header-anchor" href="#_2、完整示例"><span>2、完整示例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">path</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> MiniCssExtractPlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> require</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mini-css-extract-plugin</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">exports</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  entry</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./src/index.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  output</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">js/[name].[contenthash:10].js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    assetModuleFilename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">assets/[name].[contenthash:10][ext]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    path</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">: </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">__dirname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">dist</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  module</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    rules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\.</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">css</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">$</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        use</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">MiniCssExtractPlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">loader</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">css-loader</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      },</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  },</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  plugins</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MiniCssExtractPlugin</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">({</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">      filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[name].[contenthash].css</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }),</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ],</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、哈希碰撞" tabindex="-1"><a class="header-anchor" href="#五、哈希碰撞"><span>五、哈希碰撞</span></a></h2><h3 id="_1、什么是哈希碰撞" tabindex="-1"><a class="header-anchor" href="#_1、什么是哈希碰撞"><span>1、什么是哈希碰撞</span></a></h3><p>哈希碰撞是指两个文件根据文件特征计算出的哈希值相同。如果文件本身重名，可能会导致严重的缓存和版本管理问题。</p><p>如果文件内容相同，一定会产生哈希碰撞，但是一般不会影响代码运行。</p><p>如果内容不相同，产生哈希碰撞的概率极低，如果遇到了，就可能会导致代码运行出错。</p><h3 id="_2、哈希碰撞的危害" tabindex="-1"><a class="header-anchor" href="#_2、哈希碰撞的危害"><span>2、哈希碰撞的危害</span></a></h3><p>哈希碰撞主要影响 Webpack 的 <code>emitAssets</code> 阶段，这个阶段会输出 bundle 到指定目录下。这时候如果遇到了完全同名的 bundle，可能会发生 <mark><strong>内容覆盖</strong></mark> 的现象，即 <strong>后生成的 bundle 会覆盖之前生成的 bundle</strong>，最终只剩下一份。如果这些 bundle 的内容不相同，就意味着依赖这些 bundle 的代码在运行时可能会出现非常严重的问题。</p><h3 id="_3、如何解决" tabindex="-1"><a class="header-anchor" href="#_3、如何解决"><span>3、如何解决</span></a></h3><p>解决办法主要是通过<strong>更换算法</strong>、<strong>调整内容生成策略</strong>、<strong>增长哈希值长度</strong>、<strong>手工加盐（salt）</strong> 来降低碰撞的概率。</p><h4 id="使用更复杂的哈希算法" tabindex="-1"><a class="header-anchor" href="#使用更复杂的哈希算法"><span>使用更复杂的哈希算法</span></a></h4><p>可以指定 webpack 使用更复杂的哈希算法：例如 SHA-256、SHA-512 等。这些算法的哈希值复杂度更高、长度更长、碰撞的概率也更低。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用 webpack 5 的新特性：混合指纹算法</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 组合 SHA-3 + BLAKE3 双重校验</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">experiments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  hybridHash</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    js</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">sha3-256</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // JS 用抗量子算法</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    media</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">blake3</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 多媒体用高速算法</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改哈希算法的生成策略" tabindex="-1"><a class="header-anchor" href="#修改哈希算法的生成策略"><span>修改哈希算法的生成策略</span></a></h4><ul><li><code>contenthash</code>：根据文件内容计算的哈希值，所以文件内容不同，<code>contenthash</code> 也不同，不会产生哈希碰撞。</li><li><code>chunkhash</code>：根据文件所属的代码块（chunk）来计算的哈希值，所以如果文件所属的代码块内容不同，生成的 <code>chunkhash</code> 也不同，不会产生哈希碰撞。</li></ul><h4 id="修改哈希值长度" tabindex="-1"><a class="header-anchor" href="#修改哈希值长度"><span>修改哈希值长度</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 根据文件体积自动调整哈希位数</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">output</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[name].[contenthash:auto].js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 体积&gt;1MB → 16位</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  assetModuleFilename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[name].[hash:12][ext]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 12 位 Hash</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="人工加盐" tabindex="-1"><a class="header-anchor" href="#人工加盐"><span>人工加盐</span></a></h4><p>在 bundle 的文件名中加入一些变化的字符串，如 <mark>文件的 size</mark>、<mark>时间戳</mark>，这样即使文件内容完全相同，哈希值也会不同，从而避免哈希碰撞。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 采用 12 位哈希 + 时间戳双校验</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> \`</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[name].[contenthash:12].</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">\${</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Date</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">now</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">}</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.[ext]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">\`</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-plugin-插件检测" tabindex="-1"><a class="header-anchor" href="#使用-plugin-插件检测"><span>使用 plugin 插件检测</span></a></h4><p>可以通过插件来获取并临时保存构建过程中产生的 bundle 信息，在构建过程中随时比对，发现有重复的 bundle 就报错，或者重新生成一个新的 bundle 名称。</p>`,60)])])}const p=i(e,[["render",l]]),d=JSON.parse('{"path":"/Webpack/siytul14/","title":"Hash 文件指纹","lang":"zh-CN","frontmatter":{"title":"Hash 文件指纹","createTime":"2025/03/15 14:24:21","permalink":"/Webpack/siytul14/"},"readingTime":{"minutes":5.51,"words":1653},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Webpack/1.基础学习/10.文件指纹 Hash.md","headers":[],"bulletin":false}');export{p as comp,d as data};
