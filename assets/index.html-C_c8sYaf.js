import{_ as t,c as n,d as r,o as e}from"./app-Bg7EXfK3.js";const a="/MyBlog/assets/2-f0Gr8cka.png",s={};function i(p,o){return e(),n("div",null,[...o[0]||(o[0]=[r('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>PolyRepo 的尽头是 MonoRepo。MonoRepo 的尽头是 HybridRepo（MonoRepo 核心仓 + 多个独立 PolyRepo）</p></div><h2 id="传统架构" tabindex="-1"><a class="header-anchor" href="#传统架构"><span>传统架构</span></a></h2><h3 id="什么是传统架构" tabindex="-1"><a class="header-anchor" href="#什么是传统架构"><span>什么是传统架构？</span></a></h3><p>传统架构指的就是我们平时开发的项目，每个项目都有自己的项目结构，项目之间的代码是独立的。一般具备以下几个特征：</p><ul><li><strong>项目相互独立</strong>：每个项目都有自己的项目结构，项目之间的代码是独立的。</li><li><strong>技术栈独立</strong>：不同的项目可能使用不同的技术栈和工具链。</li><li><strong>依赖管理</strong>：项目通过 <code>node_modules</code> 管理依赖，可以将一个项目作为另外一个项目的依赖。</li><li><strong>独立部署</strong>：各自独立部署上线，通常依赖 CI/CD 工具。</li></ul><h3 id="传统架构的优势" tabindex="-1"><a class="header-anchor" href="#传统架构的优势"><span>传统架构的优势</span></a></h3><p>随着业务的发展，我们会创建更多的项目。这些项目之间可能会存在一些重复的代码或功能。</p><p>我们提取这些重复的代码或功能，将其发布成一个单独的 项目，通过 npm 包的方式引入到其他项目中，是一个非常好的选择。</p><p><img src="'+a+'" alt="1" width="1081" height="472"></p><p>如上图所示，在传统架构中，我们将项目分为以下几大部分：</p><ul><li><strong>业务应用类</strong>：业务应用系统。<code>@scope/App1</code>、<code>@scope/App2</code>。</li><li><strong>UI 组件类</strong>：我们将项目用到的 UI 组件单独封装并发布成一个单体库。<code>@scope/component</code>。</li><li><strong>公共方法类</strong>：针对不同操作对象的公共方法库。<code>@scope/utils</code>。</li><li><strong>工具类</strong>：如监控组件、日志组件、文件操作组件等。<code>@scope/Logs</code>、<code>@scope/Chart</code>。</li><li><strong>第三方库</strong>：如 <code>Echarts</code>、<code>log4j.js</code> 等。</li></ul><h3 id="传统架构的局限性" tabindex="-1"><a class="header-anchor" href="#传统架构的局限性"><span>传统架构的局限性</span></a></h3><p>随着项目数量增加，项目之间的依赖关系可能变得越来越复杂，传统架构的局限性慢慢显现出来：</p><ul><li><strong>代码耦合度高</strong>：不同项目之间依赖相同的代码或者功能，导致代码耦合度高非常高，已有的公共代码不能随意修改。</li><li><strong>依赖关系混乱</strong>：项目下不同的依赖包引用了同一个项目的不同版本，导致依赖管理冲突。</li><li><strong>版本难以管理</strong>：当我们需要修改一个依赖库的代码时，需要根据依赖关系，依次更新每个项目，非常麻烦。</li></ul><h2 id="monorepo-架构" tabindex="-1"><a class="header-anchor" href="#monorepo-架构"><span>Monorepo 架构</span></a></h2><h3 id="什么是-monorepo-架构" tabindex="-1"><a class="header-anchor" href="#什么是-monorepo-架构"><span>什么是 Monorepo 架构？</span></a></h3><p><strong>Monorepo（Monolithic Repository，即单体仓库）</strong> 是一种将多个项目或模块的代码存储在同一个版本控制仓库中的软件开发架构。与传统的<strong>多仓库（PolyRepo）模式（每个项目独立一个仓库）</strong> 不同，Monorepo 通过统一管理代码，强调代码共享、依赖管理和协作效率。</p><h3 id="monorepo-架构如何解决传统架构存在的痛点" tabindex="-1"><a class="header-anchor" href="#monorepo-架构如何解决传统架构存在的痛点"><span>Monorepo 架构如何解决传统架构存在的痛点？</span></a></h3><div class="hint-container warning"><p class="hint-container-title">多仓库中共享代码需通过复制或发布私有包，导致版本碎片化、更新繁琐。</p><p>Monorepo 架构下，所有项目/模块在同一仓库，可直接本地引用其他模块代码，无需发布包。在修改了公共代码后，所有依赖的项目/模块都能同步更新，避免版本不一致。</p></div><div class="hint-container warning"><p class="hint-container-title">依赖版本易冲突，升级需跨仓库协调，易引发“依赖地狱”</p><p>通过管理工具（如 npm、yarn 或 pnpm），强制所有模块使用本地的版本，简介保证了版本的一致性，且可以做到每一个包依旧可以独立发布成项目。</p></div><div class="hint-container warning"><p class="hint-container-title">跨仓库修改需提交多个 PR，沟通成本高，重构风险大。</p><p>所有模块都在一个仓库中，修改一个模块后，其他模块也能同步更新，避免了跨仓库修改的问题。</p></div><div class="hint-container warning"><p class="hint-container-title">各仓库配置（构建、测试、部署）需要单独配置，维护成本高。</p><p>在 Monorepo 架构下，我们可以配置一套相应的基础设施应用于整个仓库，包含构建（Webpack/Vite）、测试（Jest）、CI/CD 配置、代码规范（ESLint、Prettier）、提交规范（Commitlint）、文档管理（docs）等。</p></div><div class="hint-container warning"><p class="hint-container-title">多仓库权限分散，新人难以全局了解代码。</p><p>所有代码可见、全局透明化，便于阅读和学习。同时可以通过权限管理，控制不同项目的访问权限。</p></div><h2 id="monorepo-vs-polyrepo" tabindex="-1"><a class="header-anchor" href="#monorepo-vs-polyrepo"><span>Monorepo vs. Polyrepo</span></a></h2><table><thead><tr><th><strong>问题领域</strong></th><th><strong>传统 Polyrepo 痛点</strong></th><th><strong>Monorepo 解决方案</strong></th></tr></thead><tbody><tr><td><strong>代码复用</strong></td><td>需发布版本，升级延迟</td><td>直接源码引用，即时生效</td></tr><tr><td><strong>依赖管理</strong></td><td>版本冲突，依赖冗余</td><td>统一安装，依赖提升</td></tr><tr><td><strong>跨项目协作</strong></td><td>跨仓库协调成本高</td><td>原子提交，全局可见性</td></tr><tr><td><strong>工具链一致性</strong></td><td>配置重复，流程碎片化</td><td>统一配置，标准化流程</td></tr><tr><td><strong>微服务/多端协同</strong></td><td>类型不同步，版本漂移</td><td>共享代码和类型，统一版本</td></tr><tr><td><strong>代码可维护性</strong></td><td>搜索困难，权限管理复杂</td><td>全局搜索，目录级权限</td></tr></tbody></table><h2 id="适用场景总结" tabindex="-1"><a class="header-anchor" href="#适用场景总结"><span>适用场景总结</span></a></h2><p>Monorepo 特别适合以下场景：<br> ✅ <strong>中大型团队</strong>：需要高频协作和代码共享。<br> ✅ <strong>全栈/多端项目</strong>：如 Web、Mobile、后端服务共享逻辑。<br> ✅ <strong>微服务架构</strong>：服务间依赖紧密，需保证接口一致性。<br> ✅ <strong>开源项目</strong>：如 React、Vue 等管理核心库与插件。</p><p><strong>不适用场景</strong>：<br> ❌ 独立性极强的项目（如完全无关的产品线）。<br> ❌ 小型团队或项目，工具链复杂度可能得不偿失。</p><h2 id="最终建议" tabindex="-1"><a class="header-anchor" href="#最终建议"><span>最终建议</span></a></h2><p>选择 Monorepo 前需评估：</p><ol><li><strong>团队规模</strong>：是否有足够资源维护工具链？</li><li><strong>项目关联性</strong>：模块间是否需要高频共享代码？</li><li><strong>工具成熟度</strong>：能否接受 Turborepo/Nx 等工具的学习成本？</li></ol><p>若痛点集中在上述问题，Monorepo 可能是提升效率的最优解。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>Monorepo 架构的优势在于代码复用、依赖管理、跨项目协作等方面。但它也有一些局限性，随着项目数量增加，仓库体积会不断增大，<strong>容易诞生一个非常巨大的仓库</strong>。我们需要进行 <strong>适当的拆分</strong>，将一些独立的、稳定的、成熟的项目拆分成独立的仓库。</p></div>',33)])])}const c=t(s,[["render",i]]),l=JSON.parse('{"path":"/article/bscys0u1/","title":"传统架构向 monorepo 架构演进","lang":"zh-CN","frontmatter":{"title":"传统架构向 monorepo 架构演进","createTime":"2025/07/21 13:03:25","permalink":"/article/bscys0u1/"},"readingTime":{"minutes":5.16,"words":1547},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"前端/传统架构向monorepo演进.md","headers":[],"categoryList":[{"id":"9abfe4","sort":10008,"name":"前端"}],"bulletin":false}');export{c as comp,l as data};
