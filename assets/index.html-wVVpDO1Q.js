import{_ as t,c as n,d as s,b as e,r as l,o as h}from"./app-Bg7EXfK3.js";const d={};function r(p,i){const a=l("Mermaid");return h(),n("div",null,[i[0]||(i[0]=s(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Brotli 是 Google 在 2015 年推出的开源通用压缩算法，专为 Web 优化设计，相比 Gzip 平均提升 <strong>20-26%</strong> 的压缩率。以下是其核心技术解析：</p><h2 id="核心设计思想" tabindex="-1"><a class="header-anchor" href="#核心设计思想"><span>核心设计思想</span></a></h2><h3 id="_1、静态字典预加载" tabindex="-1"><a class="header-anchor" href="#_1、静态字典预加载"><span>1、静态字典预加载</span></a></h3><ul><li>内置 <strong>13,184 个</strong> 常见 HTML/CSS/JS 短语（如 <code>&lt;div&gt;</code>、<code>function()</code> 等）</li><li>覆盖 50% 以上 Web 文本的重复模式</li><li>字典大小约 <strong>120KB</strong>（已硬编码在算法中）</li></ul><h3 id="_2、动态字典扩展" tabindex="-1"><a class="header-anchor" href="#_2、动态字典扩展"><span>2、动态字典扩展</span></a></h3><ul><li>滑动窗口机制（默认 <strong>16MB</strong>）</li><li>实时记录新发现的重复字符串</li><li>采用 <strong>增量更新</strong> 策略减少内存开销</li></ul><h3 id="_3、多级上下文建模" tabindex="-1"><a class="header-anchor" href="#_3、多级上下文建模"><span>3、多级上下文建模</span></a></h3><p>同时应用 <strong>4 种上下文模型</strong>：</p><table><thead><tr><th>模型类型</th><th>适用场景</th></tr></thead><tbody><tr><td>Literal</td><td>未匹配的原始字符</td></tr><tr><td>Dictionary</td><td>静态/动态字典中的短语</td></tr><tr><td>Distance</td><td>LZ77 的&lt;距离,长度&gt;指针</td></tr><tr><td>Block Type</td><td>数据类型标识（文本/二进制）</td></tr></tbody></table><h2 id="压缩流程-分步解析" tabindex="-1"><a class="header-anchor" href="#压缩流程-分步解析"><span>压缩流程（分步解析）</span></a></h2><h3 id="_1、预处理阶段" tabindex="-1"><a class="header-anchor" href="#_1、预处理阶段"><span>1、预处理阶段</span></a></h3><ul><li>加载静态字典</li><li>初始化动态字典</li></ul><h3 id="_2、lz77-压缩核心" tabindex="-1"><a class="header-anchor" href="#_2、lz77-压缩核心"><span>2、LZ77 压缩核心</span></a></h3><ul><li>滑动窗口扫描重复字符串（窗口大小可配置）</li><li>匹配策略： <ul><li>优先匹配静态字典（如 <code>&quot;function&quot;</code>）</li><li>次优匹配动态字典（如用户自定义变量名）</li><li>最后用 LZ77 生成 <code>&lt;distance, length&gt;</code> 对</li></ul></li></ul><h3 id="_3、熵编码阶段" tabindex="-1"><a class="header-anchor" href="#_3、熵编码阶段"><span>3、熵编码阶段</span></a></h3><p>对数据块进行组合编码：</p><ul><li>使用 Huffman 编码对 <strong>高频词</strong> 进行短符号编码</li><li>使用算术编码对 <strong>低频词</strong> 进行长符号编码</li></ul><h3 id="_4、块结构" tabindex="-1"><a class="header-anchor" href="#_4、块结构"><span>4、块结构</span></a></h3><p>每个压缩块包含：</p><ul><li>块类型（文本/二进制）</li><li>动态 Huffman 树</li><li>压缩数据</li></ul><h2 id="关键技术创新" tabindex="-1"><a class="header-anchor" href="#关键技术创新"><span>关键技术创新</span></a></h2><h3 id="_1、上下文感知机制" tabindex="-1"><a class="header-anchor" href="#_1、上下文感知机制"><span>1、上下文感知机制</span></a></h3><ul><li>根据前 <strong>2 个字符</strong> 预测当前字符概率</li><li>例如：在 <code>&quot;fun&quot;</code> 后预测 <code>&quot;c&quot;</code>（组成 <code>&quot;function&quot;</code>）</li></ul><h3 id="_2、距离编码优化" tabindex="-1"><a class="header-anchor" href="#_2、距离编码优化"><span>2、距离编码优化</span></a></h3><ul><li>将 LZ77 的 distance 参数分为： <ul><li><strong>短距离</strong>（0-15）：直接编码</li><li><strong>中距离</strong>（16-271）：基数值+偏移量</li><li><strong>长距离</strong>（&gt;271）：对数分段编码</li></ul></li></ul><h3 id="_3、零成本字典切换" tabindex="-1"><a class="header-anchor" href="#_3、零成本字典切换"><span>3、零成本字典切换</span></a></h3><ul><li><p>静态字典与动态字典共享索引空间</p></li><li><p>通过最高位标志区分来源：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-python"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">index </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">):</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 使用静态字典</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    phrase </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> static_dict</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">index </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">^</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> 0x</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">8000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">else</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # 使用动态字典</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    phrase </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> dynamic_dict</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="性能实测数据" tabindex="-1"><a class="header-anchor" href="#性能实测数据"><span>性能实测数据</span></a></h2><blockquote><p>测试条件：Chrome 116 / i7-1185G7 @3.0GHz</p></blockquote><table><thead><tr><th>测试样本</th><th>原始大小</th><th>Brotli(11)</th><th>Gzip(9)</th><th>提升率</th></tr></thead><tbody><tr><td>jQuery 3.6.0</td><td>271 KB</td><td>70 KB</td><td>82 KB</td><td>+17%</td></tr><tr><td>Bootstrap CSS</td><td>187 KB</td><td>27 KB</td><td>33 KB</td><td>+22%</td></tr><tr><td>React DOM</td><td>1.2 MB</td><td>248 KB</td><td>312 KB</td><td>+26%</td></tr></tbody></table><h2 id="web-应用场景" tabindex="-1"><a class="header-anchor" href="#web-应用场景"><span>Web 应用场景</span></a></h2><h3 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h3><ul><li><p><strong>静态资源</strong>：预压缩至级别 11（如 <code>main.js.br</code>）</p></li><li><p><strong>动态内容</strong>：实时压缩用级别 4-6（延迟&lt;50ms）</p></li><li><p><strong>Nginx 配置</strong>：</p><div class="language-nginx line-numbers-mode" data-highlighter="shiki" data-ext="nginx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-nginx"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">brotli</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">brotli_static</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">brotli_types</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> text/html application/json</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">brotli_comp_level</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 6</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="兼容性方案" tabindex="-1"><a class="header-anchor" href="#兼容性方案"><span>兼容性方案</span></a></h3>`,35)),e(a,{code:"eJxLL0osyFAIceFyjH66btGzju3PV6+PVdDVtatxTE5OLSjRdc1Lzk/JzEu3Ukgq0lFIr8osqFFwin42p/dp18KnM1fEcjmBVCs4Vz+bsv5ZT6NTUX5JTqZ9LZcz2JBnM9bXKLhEv9g/5enseQp6SUUKT/u6n+9Z+Wxa+5Pd2xS0FZzz80pS81CtiYVqfjphWY2CK1xzehVhzSD3xXIBAKNbXPg="}),i[1]||(i[1]=s('<h2 id="算法局限" tabindex="-1"><a class="header-anchor" href="#算法局限"><span>算法局限</span></a></h2><ol><li><p><strong>压缩速度</strong></p><ul><li>级别 11 比 Gzip 慢 <strong>5-10 倍</strong>（但解压仅慢 10-20%）</li></ul></li><li><p><strong>内存占用</strong></p><ul><li>最高级别需 <strong>数百 MB</strong> 内存（Gzip 仅需几 MB）</li></ul></li><li><p><strong>二进制文件</strong></p><ul><li>对已压缩文件（如 PNG/MP4）效果有限</li></ul></li></ol><p>Brotli 通过创新的字典设计和上下文建模，在 Web 文本压缩领域树立了新标准。其技术思路也影响了后续算法（如 Zstandard 的字典训练机制）。</p>',3))])}const k=t(d,[["render",r]]),c=JSON.parse('{"path":"/article/zoknv1lr/","title":"Brotli 压缩","lang":"zh-CN","frontmatter":{"title":"Brotli 压缩","createTime":"2025/06/29 17:28:55","permalink":"/article/zoknv1lr/"},"readingTime":{"minutes":2.72,"words":815},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"前端/Brotli 压缩.md","headers":[],"categoryList":[{"id":"9abfe4","sort":10008,"name":"前端"}],"bulletin":false}');export{k as comp,c as data};
