import{_ as a,c as s,d as e,o as n}from"./app-Bg7EXfK3.js";const l={};function r(t,i){return n(),s("div",null,[...i[0]||(i[0]=[e(`<h2 id="一、构建与部署层面" tabindex="-1"><a class="header-anchor" href="#一、构建与部署层面"><span>一、构建与部署层面</span></a></h2><p>减少单点故障 (SPOF)</p><p>目标是确保资源能够被正确加载和执行。</p><ul><li><strong>资源冗余与版本控制</strong>：为静态资源添加哈希指纹（如 <code>app.a3b4c5.js</code>），配合 CDN 和长时间缓存策略。即使频繁发布，用户也能正确获取新旧版本资源，避免缓存冲突。</li><li><strong>非阻塞加载</strong>：将 CSS 放在头部，将 JS 放在尾部或使用 <code>async</code>/<code>defer</code> 属性，保证关键内容（HTML）优先渲染，即使 JS 加载失败，用户也能看到基本内容。</li></ul><h3 id="_2、负载均衡与冗余部署" tabindex="-1"><a class="header-anchor" href="#_2、负载均衡与冗余部署"><span>2、负载均衡与冗余部署</span></a></h3><p>负载均衡是一种常见的高可用性策略，通过将用户请求分散到多个服务器上运行的 Vue 应用实例中，防止单点故障。具体措施包括：</p><ul><li>使用软件负载均衡器：如 Nginx、HAProxy 等。如 Nginx+Keepalived 实现服务器热备，通过 VRRP 协议自动切换故障节点</li><li>云服务负载均衡：部署多台前端服务器组成集群，通过负载均衡器（如 AWS ELB、阿里云 SLB）分发流量</li><li>使用硬件负载均衡器：如 F5 Big-IP 等。</li><li>采用无状态设计，使任意服务器故障不影响整体服务</li></ul><p>优点：</p><ul><li>高可靠性：即使某台服务器宕机，负载均衡器也能自动将流量转移到其他可用服务器上。</li><li>扩展性：可以根据流量增加或减少服务器实例，灵活应对流量波动。</li></ul><h2 id="二、编码与容错处理层面" tabindex="-1"><a class="header-anchor" href="#二、编码与容错处理层面"><span>二、编码与容错处理层面</span></a></h2><p>增强代码韧性，目标是让应用在部分代码执行失败时，不至于全面崩溃。</p><h3 id="_1、全面的错误边界-error-boundaries" tabindex="-1"><a class="header-anchor" href="#_1、全面的错误边界-error-boundaries"><span>1、全面的错误边界（Error Boundaries）</span></a></h3><p>在 React 中，使用错误边界组件捕获子组件树的 JavaScript 错误，记录错误信息，并展示降级 UI（如一个友好的错误提示），而不是整个白屏。</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-jsx"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ErrorBoundary</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> React</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Component</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  componentDidCatch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> errorInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 上报错误给监控系统</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    logErrorToService</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">error</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> errorInfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  render</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">state</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">hasError</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      // 展示降级后的UI</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">哎呀，部分组件出错了。</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">h1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">props</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">children</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ErrorBoundary</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">MyWidget</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">ErrorBoundary</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、防御性编程" tabindex="-1"><a class="header-anchor" href="#_2、防御性编程"><span>2、防御性编程</span></a></h3><p>对任何外部输入（API 响应、URL 参数、LocalStorage）和函数调用进行校验。</p><ul><li>使用可选链（<code>?.</code>）和空值合并（<code>??</code>）操作符。</li><li>对对象属性进行判断：<code>if (data &amp;&amp; data.user &amp;&amp; data.user.name)</code> 或使用解构带默认值 <code>const { name = &#39;Unknown&#39; } = data.user || {};</code>。</li></ul><h3 id="_3、隔离第三方依赖" tabindex="-1"><a class="header-anchor" href="#_3、隔离第三方依赖"><span>3、隔离第三方依赖</span></a></h3><p>第三方库（如统计、广告代码）的失败不应影响你的核心应用。</p><ul><li>使用动态导入（<code>import()</code>）异步加载非核心的第三方库。</li><li>将第三方脚本包裹在 <code>try...catch</code> 中或通过 <code>script.onerror</code> 事件进行处理。</li></ul><h2 id="三、网络请求层面" tabindex="-1"><a class="header-anchor" href="#三、网络请求层面"><span>三、网络请求层面</span></a></h2><p>网络是不可靠的，必须为此设计合理的处理网络与 API 异常机制。</p><h3 id="_1、api-请求重试机制" tabindex="-1"><a class="header-anchor" href="#_1、api-请求重试机制"><span>1、API 请求重试机制</span></a></h3><p>对于短暂的网络抖动或 5xx 错误，可以在前端进行智能重试（例如使用指数退避算法）。库如 <code>axios-retry</code> 可以很方便地实现。</p><h3 id="_2、设置合理的超时时间" tabindex="-1"><a class="header-anchor" href="#_2、设置合理的超时时间"><span>2、设置合理的超时时间</span></a></h3><p>为 API 请求设置超时，并给用户相应的反馈（“请求超时，请检查网络”）。</p><h3 id="_3、优雅的降级数据" tabindex="-1"><a class="header-anchor" href="#_3、优雅的降级数据"><span>3、优雅的降级数据</span></a></h3><p>当核心 API 请求完全失败（如 500 错误）时，不应只展示一个空白页面。</p><ul><li>展示预置的兜底数据（Fallback Data）。</li><li>展示友好且信息明确的错误页面，引导用户尝试刷新或稍后再试。</li><li>如果应用允许，可以使用本地缓存（如 LocalStorage）中的旧数据暂时渲染。</li></ul><h3 id="_4、cdn-与多线路容灾" tabindex="-1"><a class="header-anchor" href="#_4、cdn-与多线路容灾"><span>4、CDN 与多线路容灾</span></a></h3><ul><li>全球部署 CDN 节点缓存静态资源，提升访问速度并降低源站压力</li><li>同时接入多个 CDN 服务商，当某条线路故障时自动切换备用 CDN</li><li>对关键静态资源配置多域名备份，避免单域名解析失败导致资源不可用</li><li>使用 CDN（内容分发网络）：将静态资源（JS, CSS, 图片、字体）部署到全球多个节点的 CDN 上。这不仅能加速加载，还能在一处 CDN 节点故障时，由其他节点继续提供服务。</li></ul><h2 id="四、用户体验层面" tabindex="-1"><a class="header-anchor" href="#四、用户体验层面"><span>四、用户体验层面</span></a></h2><p>提供状态反馈与降级 UI，目标是保持与用户的沟通，管理用户的预期。</p><ul><li><strong>清晰的加载状态（Loading）</strong>：让用户知道应用正在工作，而不是卡死。</li><li><strong>skeleton screens（骨架屏）</strong>：在内容加载前先展示其占位图形，极大提升用户感知的性能和体验连续性，比旋转的菊花图（spinner）感觉更快。</li><li><strong>实现前端降级策略</strong>：如果某个非核心功能（如推荐列表、评论区）的接口失败，可以选择隐藏该模块或展示一个“该功能暂不可用”的提示，而不是让整个页面崩溃。</li></ul><h2 id="五、系统监控层面" tabindex="-1"><a class="header-anchor" href="#五、系统监控层面"><span>五、系统监控层面</span></a></h2><p>持续监控与量化，你无法优化你无法衡量的东西。</p><h3 id="_1、前端监控-apm-系统" tabindex="-1"><a class="header-anchor" href="#_1、前端监控-apm-系统"><span>1、前端监控（APM）系统</span></a></h3><p>接入前端监控工具（如 Sentry, FrontJS, 阿里云 ARMS 等），收集：</p><ul><li><strong>JavaScript 错误</strong>：运行时错误、Promise rejection。</li><li><strong>API 请求成功率</strong>：监控 API 的失败率、慢请求。</li><li><strong>性能指标</strong>：FP/FCP/FMP/LCP（加载速度），FID/CLS（交互流畅度）。</li><li><strong>业务指标</strong>：关键按钮的点曝光率、页面 PV/UV。</li><li><strong>真实用户监控（RUM）</strong>：监控线上真实用户的体验，而不仅仅是开发环境下的性能。</li></ul><h3 id="_2、自动化与监控体系" tabindex="-1"><a class="header-anchor" href="#_2、自动化与监控体系"><span>2、自动化与监控体系</span></a></h3><ul><li>建立 CI/CD 流水线（如 Jenkins/GitLab CI）实现自动化部署和回滚</li><li>使用 Prometheus 等工具监控前端性能指标，设置异常报警阈值</li><li>实施健康检查机制，对异常节点自动隔离并触发恢复流程</li></ul><h2 id="七、架构优化" tabindex="-1"><a class="header-anchor" href="#七、架构优化"><span>七、架构优化</span></a></h2><ul><li>模块化拆分前端应用，按业务域划分代码结构降低耦合度</li><li>采用微前端架构，隔离各子应用运行环境避免连锁故障</li><li>实施资源预加载和懒加载策略，优化关键渲染路径</li></ul><p>典型技术组合示例：</p><ul><li>负载均衡层：Nginx+Keepalived</li><li>资源分发层：多 CDN+对象存储</li><li>监控层：Prometheus+Grafana</li><li>会话层：Redis 集群</li><li>部署层：Docker+Kubernetes</li></ul><p>引用链接：</p><ol><li><a href="https://blog.csdn.net/weixin_34253126/article/details/89617653" target="_blank" rel="noopener noreferrer">Nginx&amp;Keepalived 实现高可用 - CSDN 博客</a></li><li><a href="https://blog.csdn.net/mmc123125/article/details/143433407" target="_blank" rel="noopener noreferrer">打破瓶颈:在项目中实现高并发与高可用的有效策略 - CSDN 博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/65763737" target="_blank" rel="noopener noreferrer">简单策略让前端资源实现高可用 - 苏洋</a></li><li><a href="https://worktile.com/kb/p/3681248" target="_blank" rel="noopener noreferrer">前端 vue 如何实现高可用部署 - Worktile</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows-server/remote/remote-desktop-services/rds-rdweb-gateway-ha" target="_blank" rel="noopener noreferrer">向 RD Web 和网关 Web 前端添加高可用性 - Microsoft</a></li><li><a href="https://www.cnblogs.com/feihongwuhen/archive/2012/11/20/7169771.html" target="_blank" rel="noopener noreferrer">网站前端服务器高可用方案 - 博客园</a></li><li><a href="https://blog.csdn.net/weixin_45985053/article/details/126531667" target="_blank" rel="noopener noreferrer">如何保证高可用,我有 11 个关键技巧 - CSDN 博客</a></li><li><a href="https://www.cnblogs.com/wang--/p/17310707.html" target="_blank" rel="noopener noreferrer">如何保证网站的高可用性 - 博客园</a></li><li><a href="https://blog.csdn.net/mmc123125/article/details/147238460" target="_blank" rel="noopener noreferrer">模块化与构建优化实践:提升大型前端项目可维护性与性能 - CSDN 博客</a></li><li><a href="http://www.bilibili.com/video/BV1rP411f7Wn?p=33" target="_blank" rel="noopener noreferrer">前端基础建设与架构 30 讲 - 哔哩哔哩</a></li><li><a href="https://blog.csdn.net/rxbook/article/details/136345790" target="_blank" rel="noopener noreferrer">怎么保证微服务应用的高可用性? - CSDN 博客</a></li><li><a href="https://juejin.cn/post/7263315523537535034" target="_blank" rel="noopener noreferrer">前端负载均衡:优化性能与确保可靠性 - 掘金开发者社区</a></li><li><a href="https://blog.csdn.net/baidu_31384805/article/details/140342526" target="_blank" rel="noopener noreferrer">前后端分离高可用的部署方案 - CSDN 博客</a></li><li><a href="https://blog.csdn.net/weixin_34051201/article/details/92207086" target="_blank" rel="noopener noreferrer">Keepalived+Nginx 实现前端负载均衡的高可用 - CSDN 博客</a></li><li><a href="https://www.zitian.cn/shouji/fangan/website.aspx" target="_blank" rel="noopener noreferrer">网站高可用实现方案 - 紫田网络</a></li><li><a href="https://www.zhihu.com/question/351824113/answer/3061132817" target="_blank" rel="noopener noreferrer">什么是系统架构的高可用?需要从哪些方面去提高系统的高可用? - 京东云</a></li><li><a href="https://zhuanlan.zhihu.com/p/716194701" target="_blank" rel="noopener noreferrer">关于前端稳定性建设的系统性思考 - 潘锦</a></li><li><a href="https://cloud.tencent.com/developer/article/2148729" target="_blank" rel="noopener noreferrer">浅谈系统稳定性与高可用保障的几种思路 - 腾讯云</a></li><li><a href="https://www.jianshu.com/p/d6aa3adf2414" target="_blank" rel="noopener noreferrer">Nginx&amp;Keepalived 实现高可用 - 简书社区</a></li><li><a href="https://www.php.cn/faq/616804.html" target="_blank" rel="noopener noreferrer">如何在 Java 中实现高可用性和容错性 - php 中文网</a></li><li><a href="https://cloud.tencent.com/developer/article/1865025" target="_blank" rel="noopener noreferrer">互联网三高架构:高并发、高性能、高可用 - 腾讯云</a></li><li><a href="https://zhuanlan.zhihu.com/p/579442834" target="_blank" rel="noopener noreferrer">浅谈系统稳定性与高可用保障的几种思路 - SmartCode 得物技术</a></li></ol>`,47)])])}const p=a(l,[["render",r]]),d=JSON.parse('{"path":"/article/bjo2k0jf/","title":"前端高可用","lang":"zh-CN","frontmatter":{"title":"前端高可用","createTime":"2025/09/05 12:40:59","permalink":"/article/bjo2k0jf/"},"readingTime":{"minutes":6.79,"words":2036},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"前端/前端高可用.md","headers":[],"categoryList":[{"id":"9abfe4","sort":10008,"name":"前端"}],"bulletin":false}');export{p as comp,d as data};
