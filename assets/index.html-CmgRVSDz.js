import{_ as d,c as e,d as n,b as a,a as i,r as l,o as h}from"./app-Bg7EXfK3.js";const p={};function k(r,s){const t=l("Mermaid");return h(),e("div",null,[s[0]||(s[0]=n('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Vue 组件实例在创建时要经历一系列的初始化步骤。在此过程中，Vue 会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：<mark>生命周期钩子</mark>。</p><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段对外暴露了两个钩子，执行前、执行后。</p><p>常用的钩子：<code>setup()</code>、<code>onMounted</code>、<code>onUpdated</code>、<code>onBeforeUnmount</code></p><h3 id="生命周期钩子列表" tabindex="-1"><a class="header-anchor" href="#生命周期钩子列表"><span>生命周期钩子列表</span></a></h3><p>以下是 Vue 3 的生命周期钩子及其作用的详细列表：</p><table><thead><tr><th><strong>阶段</strong></th><th><strong>钩子</strong></th><th><strong>执行时机</strong></th><th><strong>典型应用场景</strong></th><th><strong>注意事项</strong></th></tr></thead><tbody><tr><td><strong>创建</strong></td><td><code>setup()</code></td><td>组件实例创建，响应式数据初始化</td><td>定义响应式变量、函数，调用接口、处理非 DOM 逻辑</td><td>无法访问 <code>this</code> 和 DOM</td></tr><tr><td><strong>挂载</strong></td><td><code>onBeforeMount()</code></td><td>模板编译完成，DOM 挂载前</td><td>预渲染数据处理</td><td>直接操作 DOM 无效</td></tr><tr><td></td><td><code>onMounted()</code></td><td>DOM 挂载完成，子组件已渲染</td><td>操作 DOM、初始化第三方库（如图表）</td><td>可安全使用 <code>refs</code> 访问元素</td></tr><tr><td><strong>更新</strong></td><td><code>onBeforeUpdate()</code></td><td>响应式数据变化后，DOM 更新前</td><td>保存当前 DOM 状态（如滚动位置）</td><td>避免修改响应式数据（可能循环更新）</td></tr><tr><td></td><td><code>onUpdated()</code></td><td>DOM 重新渲染完成</td><td>基于新 DOM 布局计算（如图表重绘）</td><td>谨慎修改数据以防无限循环</td></tr><tr><td><strong>卸载</strong></td><td><code>onBeforeUnmount()</code></td><td>组件卸载前，实例仍完整</td><td>清理定时器、取消事件监听</td><td>必须清理资源防内存泄漏</td></tr><tr><td></td><td><code>onUnmounted()</code></td><td>组件卸载完成，DOM 已移除</td><td>记录日志、确认资源释放</td><td>所有子组件已销毁</td></tr><tr><td><strong>缓存组件</strong></td><td><code>onActivated()</code></td><td><code>&lt;keep-alive&gt;</code> 缓存的组件激活时</td><td>恢复定时器、重新拉取数据</td><td>需配合 <code>&lt;keep-alive&gt;</code> 使用</td></tr><tr><td></td><td><code>onDeactivated()</code></td><td><code>&lt;keep-alive&gt;</code> 缓存的组件失活时</td><td>暂停动画、保存临时状态</td><td>非销毁，组件仍驻留内存</td></tr><tr><td><strong>错误处理</strong></td><td><code>onErrorCaptured()</code></td><td>捕获子孙组件错误时</td><td>全局错误上报、降级 UI 展示</td><td>可返回 <code>false</code> 阻止错误冒泡</td></tr></tbody></table><h3 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图"><span>流程图</span></a></h3><p><img src="https://cn.vuejs.org/assets/lifecycle_zh-CN.W0MNXI0C.png" alt="Vue 3 生命周期"></p><h2 id="与-vue-2-的生命周期对比" tabindex="-1"><a class="header-anchor" href="#与-vue-2-的生命周期对比"><span>与 Vue 2 的生命周期对比</span></a></h2><table><thead><tr><th>钩子名称</th><th>vue2</th><th>vu3</th></tr></thead><tbody><tr><td>创建前</td><td>beforeCreate</td><td>无（被 <code>setup()</code> 替代）</td></tr><tr><td>创建完成</td><td>created</td><td>无（被 <code>setup()</code> 替代）</td></tr><tr><td>挂载前</td><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>挂载完成</td><td>mounted</td><td>onMounted</td></tr><tr><td>更新前</td><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>更新完成</td><td>updated</td><td>onUpdated</td></tr><tr><td>卸载前</td><td>beforeDestroy</td><td>onBeforeUnmount</td></tr><tr><td>卸载完成</td><td>destroyed</td><td>onUnmounted</td></tr><tr><td>激活</td><td>activated</td><td>onActivated</td></tr><tr><td>停用</td><td>deactivated</td><td>onDeactivated</td></tr><tr><td>错误捕获</td><td>errorCaptured</td><td>onErrorCaptured</td></tr><tr><td>调试跟踪钩子</td><td>无</td><td>onRenderTracked</td></tr><tr><td>调试触发钩子</td><td>无</td><td>onRenderTriggered</td></tr><tr><td>数据预取钩子（SSR 服务中）</td><td>serverPrefetch</td><td>onServerPrefetch</td></tr></tbody></table><h2 id="父子组件的钩子执行顺序" tabindex="-1"><a class="header-anchor" href="#父子组件的钩子执行顺序"><span>父子组件的钩子执行顺序</span></a></h2><p>一般来说父子组件在逻辑上：</p><ul><li>父组件先创建，子组件后创建</li><li>子组件先挂载，父组件后挂载</li><li>子组件先更新，父组件后更新</li><li>子组件先销毁，父组件后销毁</li></ul><h3 id="初始化渲染" tabindex="-1"><a class="header-anchor" href="#初始化渲染"><span>初始化渲染</span></a></h3><p>页面的初始化渲染主要包含 <code>setup</code> 和挂载两个阶段。</p><p>setup 阶段主要完成了组合式 API 的初始化，这里边包含了响应式对象的创建、各种生命周期钩子的注册、侦听器的创建、计算属性的创建等。最终生成组件的实例。</p><p>挂载阶段就是将元素渲染到页面上。它包含两部分：创建 DOM 和挂载 DOM。</p>',18)),a(t,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFAIXEYoXnHdue7255snsbhrQzSPrp2glQabB8gK6dXYCVQnFqSWmBhiay0NOO2U9374Kb9nTdvCf7upEVJKWm5Rel+uaX5pVAdToDJZwxDQMKQQyD241kGFQPTsPgep71NL3YuxdZKhekOjUF1dlwByOph0oh1AMA56x/7A=="}),s[1]||(s[1]=n(`<p>以上过程，我们可以用伪代码去理解：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 模拟 vue 的初始化</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">compoment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> parentElm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> beforeMount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> compoment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 执行 setup 完成组件实例的初始化</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  setup</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setup</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 执行组件 beforeMount 钩子</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  beforeMount</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> beforeMount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 生成组件的 dom</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> elm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> createElm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">compoment</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 递归处理子组件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">child</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &gt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    child</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">forEach</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">item</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> elm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    });</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 挂载 dom 到父组件上</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  mount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">elm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> parentElm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 完成挂载，执行 onMounted 钩子</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  onMounted</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &amp;&amp;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> onMounted</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 挂载组件 dom</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> mount</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">elm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> parentElm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  parentElm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">appendChild</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">elm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">compoments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> document</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getElementById</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">app</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">为什么要先挂载子组件 ？</p><p>先创建 dom 并不挂载，可以一次性将 dom 挂载到页面上，避免逐个挂载给页面造成的闪烁，同时避免子节点变化对父节点造成的影响，导致频繁的重绘。</p></div><h3 id="更新阶段" tabindex="-1"><a class="header-anchor" href="#更新阶段"><span>更新阶段</span></a></h3><p>更新阶段一般是子组件先更新，然后父组件再更新，其生命周期钩子的执行顺序如下：</p>`,5)),a(t,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFAIXEYoXnHdue7255snsbhrQzSPrp2glQabB8gK6dXYCVQlJqWn5RamhBSmJJqoYmXMbZSuHJngUvGyY9m7ahoCi/oBgs4wyRwaIHKgOx4NnsLUBtyOKlYLUpSBYArcZQDBVHKAYAz09ang=="}),s[2]||(s[2]=i("h3",{id:"卸载阶段",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#卸载阶段"},[i("span",null,"卸载阶段")])],-1)),s[3]||(s[3]=i("p",null,"和更新顺序类似，卸载也是先卸载子组件，然后卸载父组件。",-1)),a(t,{code:"eJwrTi0sTc1LTnXJTEwvSszlUgCCgsSikszkzILEvBKFAIXEYoXnHdue7255snsbhrQzSPrp2glQabB8gK6dXYCVQn6eU2paflFqaF5ufmleiYYmXNLZSuHJngUvGyY9m7ahoCi/oBgs4wyRwa4NKgmx5mnvjhd7977f0/NySsOz9Y1P1817sq8b1Qyo7tQUJGuBbiKkH+50ZP0ASbN2Tg=="}),s[4]||(s[4]=i("div",{class:"hint-container tip"},[i("p",{class:"hint-container-title"},"为什么要先销毁子组件，而不是直接销毁父组件 ？"),i("p",null,"这是为了防止内存泄露。"),i("ol",null,[i("li",null,"子组件内可能存在定时器、计时器、dom 引用等需要释放。"),i("li",null,"模板渲染到过程中，对应的响应式数据和组件之间存在依赖和订阅的。直接销毁父组件，可能这些依赖和订阅无法得到真正的销毁。")])],-1))])}const g=d(p,[["render",k]]),c=JSON.parse('{"path":"/Vue/m8d9flw5/","title":"生命周期钩子","lang":"zh-CN","frontmatter":{"title":"生命周期钩子","createTime":"2025/08/08 00:35:21","permalink":"/Vue/m8d9flw5/"},"readingTime":{"minutes":4.6,"words":1380},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Vue/2.Vue 3/1.核心语法/10.生命周期.md","headers":[],"bulletin":false}');export{g as comp,c as data};
