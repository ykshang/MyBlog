import{_ as t,c as e,d as r,o as s}from"./app-Bg7EXfK3.js";const n={};function c(o,a){return s(),e("div",null,[...a[0]||(a[0]=[r("<p>在 JavaScript 中，闭包的实现使用了堆。</p><p>闭包是<strong>指在函数内部创建的函数，并且能够访问其包含函数的作用域</strong>。在创建闭包时，包含函数的作用域中的变量和函数被保留在内存中，即使包含函数执行完毕，这些变量和函数仍然可以在闭包中被访问和使用。</p><p>由于闭包中包含对外部作用域的变量的引用，这些变量需要被一直保存在内存中，而不是随着函数的执行完毕而被销毁。这些持久保存在内存中的变量被存储在堆中，而不是栈中。</p><p><strong>当创建一个闭包时，包含函数的执行环境和变量的活动记录会被推入调用栈中，但在包含函数执行完毕后，该执行环境会被销毁，而闭包中引用的变量仍然存在于堆中</strong>。这意味着，闭包可以继续访问和操作包含函数中的变量，即使包含函数已经执行完毕。</p><p>由于闭包中的变量存储在堆中，所以在使用闭包时需要注意内存管理。如果创建大量的闭包且持有大量的外部作用域变量引用，可能会导致内存占用过大，影响性能。因此，在使用闭包时，应该及时释放不再使用的变量引用，以便垃圾回收机制可以回收内存空间。</p><p>总而言之，在 JavaScript 中，闭包的实现<strong>使用堆来存储闭包中引用的变量和函数</strong>，以保证闭包能够持久地访问外部作用域。</p>",6)])])}const p=t(n,[["render",c]]),m=JSON.parse('{"path":"/Javascript/p8q37sxr/","title":"22. 在 JavaScript 中，闭包的实现使用了堆还是栈？","lang":"zh-CN","frontmatter":{"title":"22. 在 JavaScript 中，闭包的实现使用了堆还是栈？","createTime":"2025/03/15 13:21:27","permalink":"/Javascript/p8q37sxr/"},"readingTime":{"minutes":1.57,"words":471},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Javascript/99.面试题/22.在 JavaScript 中，闭包的实现使用了堆还是栈？.md","headers":[],"bulletin":false}');export{p as comp,m as data};
