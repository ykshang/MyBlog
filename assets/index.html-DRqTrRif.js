import{_ as a,c as i,d as n,o as e}from"./app-Bg7EXfK3.js";const t={};function l(h,s){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介"><span>一、简介</span></a></h2><p>尾调优化（Tail Call Optimization，TCO），也称为<strong>尾递归优化</strong>，是编程语言中一种编译器或解释器的优化技术，用于优化函数的<strong>尾调用（Tail Call）</strong>。</p><h4 id="实质" tabindex="-1"><a class="header-anchor" href="#实质"><span>实质</span></a></h4><p>避免函数在频繁调用的时候，重复实例化。每次调用，通过返回之前的<strong>实例的调用栈（指针）</strong>，来<strong>避免重复创建实例导致的堆栈快速增长</strong>。</p><h4 id="主要作用" tabindex="-1"><a class="header-anchor" href="#主要作用"><span>主要作用</span></a></h4><p>避免在递归或链式函数调用时产生不必要的调用栈堆积，从而节省内存并防止栈溢出（Stack Overflow）。</p><div class="hint-container tip"><p class="hint-container-title">注意</p><p>支持尾调优化的函数的最后一步 <strong>必须且只能是函数调用</strong>，不能有其他操作（如运算、赋值等）。</p></div><h2 id="二、示例" tabindex="-1"><a class="header-anchor" href="#二、示例"><span>二、示例</span></a></h2><p>以下两个函数中，fun2 的最后一行有含有加法操作，所以不支持尾调优化</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fun1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 直接返回函数调用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fun2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 没有直接返回函数调用</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)])])}const p=a(t,[["render",l]]),d=JSON.parse('{"path":"/Javascript/lyp12fnc/","title":"15. ES6 中的尾调用优化是什么？请举例说明。","lang":"zh-CN","frontmatter":{"title":"15. ES6 中的尾调用优化是什么？请举例说明。","createTime":"2025/03/12 17:19:51","permalink":"/Javascript/lyp12fnc/"},"readingTime":{"minutes":0.92,"words":276},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Javascript/99.面试题/15.ES6 中的尾调用优化是什么？请举例说明。.md","headers":[],"bulletin":false}');export{p as comp,d as data};
