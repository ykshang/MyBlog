import{_ as a,c as i,d as e,o as n}from"./app-Bg7EXfK3.js";const t={};function l(h,s){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h2 id="一、概念" tabindex="-1"><a class="header-anchor" href="#一、概念"><span>一、概念</span></a></h2><p><mark>事件绑定</mark> 是指给一个或一组元素注册事件监听事件，以便触发事件时可以执行对应的处理函数</p><p><mark>事件捕获</mark> 是指<mark>自外向内</mark> 把事件传递到目标元素的过程。当一个事件发生时，会先经过最外层的元素，然后逐级向下传递，直到达到最具体的元素。</p><p><mark>事件冒泡</mark> 是指<mark>自内向外</mark> 把事件向外传递的过程。当一个事件发生时，会先触发最具体的元素上的事件处理函数，然后逐级向上冒泡，直到达到最外层的元素。</p><p><mark>事件委托</mark>（Event delegation）是一种在开发中常用的处理事件的技术。它利用<mark>事件冒泡</mark>的原理，在父元素上监听事件，然后通过判断<mark>事件来源</mark>来执行相应的操作。</p><h2 id="二、常见场景" tabindex="-1"><a class="header-anchor" href="#二、常见场景"><span>二、常见场景</span></a></h2><h3 id="_1、阻止事件冒泡" tabindex="-1"><a class="header-anchor" href="#_1、阻止事件冒泡"><span>1、阻止事件冒泡</span></a></h3><p>你可以使用<code>event.stopPropagation()</code>方法来停止事件的传播，这样事件就不会继续向上传播。</p><p>例如：在这个例子中，当元素被点击时，事件不会继续传播到父元素或其他元素。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>element.addEventListener(&quot;click&quot;, function (event) {</span></span>
<span class="line"><span>  event.stopPropagation();</span></span>
<span class="line"><span>  // 其他业务代码</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、阻止默认行为" tabindex="-1"><a class="header-anchor" href="#_2、阻止默认行为"><span>2、阻止默认行为</span></a></h3><h4 id="_2-1、event-preventdefault" tabindex="-1"><a class="header-anchor" href="#_2-1、event-preventdefault"><span>2.1、event.preventDefault()</span></a></h4><p>可以使用<code>event.preventDefault()</code>方法来阻止事件的默认行为。比如阻止 <code>&lt;a&gt;</code> 的跳转、按钮的点击</p><h4 id="_2-2、on-事件" tabindex="-1"><a class="header-anchor" href="#_2-2、on-事件"><span>2.2、on 事件</span></a></h4><p>如果是通过 <strong>on 事件</strong> 添加，可以通过 <code>return false</code> 的方式阻止默认处理</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">onclick</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、事件委托的优缺点" tabindex="-1"><a class="header-anchor" href="#三、事件委托的优缺点"><span>三、事件委托的优缺点</span></a></h2><ul><li><p><mark>优点</mark>：使用事件委托的主要优点是减少了事件处理函数的数量，提高了性能和内存占用。当页面中有大量相似的子元素需要绑定事件时，使用事件委托可以将事件监听器绑定到父元素上，而不是每个子元素上，从而避免了为每个子元素都创建一个事件处理函数的开销。</p></li><li><p><mark>缺点</mark>：事件委托也有一些限制，例如事件冒泡的机制和事件源的判断需要额外的处理。此外，由于事件委托将事件监听器绑定到父元素上，因此在要委托的父元素被移除时，需要手动取消事件委托，防止<mark>内存泄漏</mark>。</p></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 原生</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">click</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // event.target 中可以获取到具体的触发的子元素</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  let</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> targetDom</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">target</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19)])])}const p=a(t,[["render",l]]),d=JSON.parse('{"path":"/Javascript/ctujhj4o/","title":"事件绑定、冒泡、捕获、委托","lang":"zh-CN","frontmatter":{"title":"事件绑定、冒泡、捕获、委托","createTime":"2025/03/12 17:19:50","permalink":"/Javascript/ctujhj4o/"},"readingTime":{"minutes":2.12,"words":636},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Javascript/1.基础知识/23.事件绑定、冒泡、捕获、委托.md","headers":[],"bulletin":false}');export{p as comp,d as data};
