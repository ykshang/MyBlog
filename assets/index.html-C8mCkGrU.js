import{_ as t,c as e,d as i,o as d}from"./app-Bg7EXfK3.js";const a={};function c(n,s){return d(),e("div",null,[...s[0]||(s[0]=[i(`<h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介"><span>一、简介</span></a></h2><p>tsc 是 TypeScript 官方的命令行编译器，用来检查代码，并将其编译成 JavaScript 代码。</p><p>tsc 默认使用当前目录下的配置文件 <code>tsconfig.json</code>，但也可以接受独立的命令行参数。命令行参数会覆盖 <code>tsconfig.json</code>，比如命令行指定了所要编译的文件，那么 tsc 就会忽略 <code>tsconfig.json</code> 的 <code>files</code> 属性。</p><h2 id="二、安装" tabindex="-1"><a class="header-anchor" href="#二、安装"><span>二、安装</span></a></h2><p>tsc 是一个 npm 模块，使用下面的命令安装（必须先安装 npm）。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -g</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> typescript</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令是全局安装 tsc，也可以在项目中将 tsc 安装为一个依赖模块。</p><p>安装完成后，检查一下是否安装成功。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 或者 tsc --version</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Version</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5.1.6</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面命令中，<code>-v</code> 或 <code>--version</code> 参数可以输出当前安装的 tsc 版本。</p><h2 id="三、使用" tabindex="-1"><a class="header-anchor" href="#三、使用"><span>三、使用</span></a></h2><h3 id="_1、帮助信息" tabindex="-1"><a class="header-anchor" href="#_1、帮助信息"><span>1、帮助信息</span></a></h3><p><code>-h</code> 或 <code>--help</code> 参数输出帮助信息。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>默认情况下，<code>--help</code> 参数仅显示基本的可用选项。我们可以使用 <code>--all</code> 参数，查看完整的帮助信息。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --all</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2、编译脚本" tabindex="-1"><a class="header-anchor" href="#_2、编译脚本"><span>2、编译脚本</span></a></h3><p>安装 tsc 之后，就可以编译 TypeScript 脚本了。</p><p><code>tsc</code> 命令后面，加上 TypeScript 脚本文件，就可以将其编译成 JavaScript 脚本。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> app.ts</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令会在当前目录下，生成一个 <code>app.js</code> 脚本文件，这个脚本就完全是编译后生成的 JavaScript 代码。</p><p><code>tsc</code> 命令也可以一次编译多个 TypeScript 脚本。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file1.ts</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file2.ts</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file3.ts</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令会在当前目录生成三个 JavaScript 脚本文件 <code>file1.js</code>、<code>file2.js</code>、<code>file3.js</code>。</p><p>tsc 有很多参数，可以调整编译行为：</p><ol><li><p><code>--outFile</code>：如果想将多个 TypeScript 脚本编译成一个 JavaScript 文件，使用<code>--outFile</code>参数。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file1.ts</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> file2.ts</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --outFile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> app.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令将<code>file1.ts</code>和<code>file2.ts</code>两个脚本编译成一个 JavaScript 文件<code>app.js</code>。</p></li><li><p><code>outDir</code>：编译结果默认都保存在当前目录，<code>--outDir</code>参数可以指定保存到其他目录。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> app.ts</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --outDir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> dist</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面命令会在<code>dist</code>子目录下生成<code>app.js</code>。</p></li><li><p><code>--target</code>： 为了保证编译结果能在各种 JavaScript 引擎运行，tsc 默认会将 TypeScript 代码编译成很低版本的 JavaScript，即 3.0 版本（以<code>es3</code>表示）。这通常不是我们想要的结果。</p><p>这时可以使用<code>--target</code>参数，指定编译后的 JavaScript 版本。建议使用<code>es2015</code>，或者更新版本。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --target</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> es2015</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> app.ts</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>tsc 的基本用法如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 使用 tsconfig.json 的配置</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 只编译 index.ts</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 编译 src 目录的所有 .ts 文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> src/</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">.ts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 指定编译配置文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --project</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsconfig.production.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 只生成类型声明文件，不编译出 JS 文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.js</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --declaration</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --emitDeclarationOnly</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 多个 TS 文件编译成单个 JS 文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tsc</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> app.ts</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> util.ts</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --target</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> esnext</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --outfile</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> index.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、完整参数列表" tabindex="-1"><a class="header-anchor" href="#四、完整参数列表"><span>四、完整参数列表</span></a></h2><p>tsc 的命令行参数，大部分与 tsconfig.json 的属性一一对应。</p><p>下面只是按照首字母排序，简单罗列出主要的一些参数，详细解释可以参考《tsconfig.json 配置文件》一章。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>--all</code></td><td>输出所有可用的参数。</td></tr><tr><td><code>--allowJs</code></td><td>允许 TS 脚本加载 JS 模块，编译时将 JS 一起拷贝到输出目录。</td></tr><tr><td><code>--allowUnreachableCode</code></td><td>如果 TS 脚本有不可能运行到的代码，不报错。</td></tr><tr><td><code>--allowUnusedLabels</code></td><td>如果 TS 脚本有没有用到的标签，不报错。</td></tr><tr><td><code>--alwaysStrict</code></td><td>总是在编译产物的头部添加<code>use strict</code>。</td></tr><tr><td><code>--baseUrl</code></td><td>指定非相对位置的模块定位的基准 URL。</td></tr><tr><td><code>--build</code></td><td>启用增量编译。</td></tr><tr><td><code>--checkJs</code></td><td>对 JS 脚本进行类型检查。</td></tr><tr><td><code>--declaration</code></td><td>为 TS 脚本生成一个类型生成文件。</td></tr><tr><td><code>--declarationDir</code></td><td>指定生成的类型声明文件的所在目录。</td></tr><tr><td><code>--declarationMap</code></td><td>为<code>.d.ts</code>文件生成 SourceMap 文件。</td></tr><tr><td><code>--diagnostics</code></td><td>构建后输出编译性能信息。</td></tr><tr><td><code>--emitBOM</code></td><td>在编译输出的 UTF-8 文件头部加上 BOM 标志。</td></tr><tr><td><code>--emitDeclarationOnly</code></td><td>只编译输出类型声明文件，不输出 JS 文件。</td></tr><tr><td><code>--esModuleInterop</code></td><td>更容易使用 import 命令加载 CommonJS 模块。</td></tr><tr><td><code>--exactOptionalPropertyTypes</code></td><td>不允许将可选属性设置为<code>undefined</code>。</td></tr><tr><td><code>--experimentalDecorators</code></td><td>支持早期的装饰器语法。</td></tr><tr><td><code>--explainFiles</code></td><td>输出进行编译的文件信息。</td></tr><tr><td><code>--forceConsistentCasingInFileNames</code></td><td>文件名大小写敏感，默认打开。</td></tr><tr><td><code>--help</code></td><td>输出帮助信息。</td></tr><tr><td><code>--importHelpers</code></td><td>从外部库（比如 tslib）输入辅助函数。</td></tr><tr><td><code>--incremental</code></td><td>启用增量构建。</td></tr><tr><td><code>--init</code></td><td>在当前目录创建一个全新的<code>tsconfig.json</code>文件，里面是预设的设置。</td></tr><tr><td><code>--inlineSourceMap</code></td><td>SourceMap 信息嵌入 JS 文件，而不是生成独立的<code>.js.map</code>文件。</td></tr><tr><td><code>--inlineSources</code></td><td>将 TypeScript 源码作为 SourceMap 嵌入编译出来的 JS 文件。</td></tr><tr><td><code>--isolatedModules</code></td><td>确保每个模块能够独立编译，不依赖其他输入的模块。</td></tr><tr><td><code>--jsx</code></td><td>设置如何处理 JSX 文件。</td></tr><tr><td><code>--lib</code></td><td>设置目标环境需要哪些内置库的类型描述。</td></tr><tr><td><code>--listEmittedFiles</code></td><td>编译后输出编译产物的文件名。</td></tr><tr><td><code>--listFiles</code></td><td>编译过程中，列出读取的文件名。</td></tr><tr><td><code>--listFilesOnly</code></td><td>列出编译所要处理的文件，然后停止编译。</td></tr><tr><td><code>--locale</code></td><td>指定编译时输出的语言，不影响编译结果。</td></tr><tr><td><code>--mapRoot</code></td><td>指定 SourceMap 文件的位置。</td></tr><tr><td><code>--module</code></td><td>指定编译生成的模块格式。</td></tr><tr><td><code>--moduleResolution</code></td><td>指定如何根据模块名找到模块的位置。</td></tr><tr><td><code>--moduleSuffixes</code></td><td>指定模块文件的后缀名。</td></tr><tr><td><code>--newLine</code></td><td>指定编译产物的换行符，可以设为<code>crlf</code>或者<code>lf</code>。</td></tr><tr><td><code>--noEmit</code></td><td>不生成编译产物，只进行类型检查。</td></tr><tr><td><code>--noEmitHelpers</code></td><td>不在编译产物中加入辅助函数。</td></tr><tr><td><code>--noEmitOnError</code></td><td>一旦报错，就停止编译，没有编译产物。</td></tr><tr><td><code>--noFallthroughCasesInSwitch</code></td><td>Switch 结构的<code>case</code>分支必须有终止语句（比如<code>break</code>）。</td></tr><tr><td><code>--noImplicitAny</code></td><td>类型推断只要为<code>any</code>类型就报错。</td></tr><tr><td><code>--noImplicitReturns</code></td><td>函数内部没有显式返回语句（比如<code>return</code>）就报错。</td></tr><tr><td><code>--noImplicitThis</code></td><td>如果<code>this</code>关键字是<code>any</code>类型，就报错。</td></tr><tr><td><code>--noImplicitUseStrict</code></td><td>编译产生的 JS 文件头部不添加<code>use strict</code>语句。</td></tr><tr><td><code>--noResolve</code></td><td>不进行模块定位，除非该模块是由命令行传入。</td></tr><tr><td><code>--noUnusedLocals</code></td><td>如果有未使用的局部变量就报错。</td></tr><tr><td><code>--noUnusedParameters</code></td><td>如果有未使用的函数参数就报错。</td></tr><tr><td><code>--outDir</code></td><td>指定编译产物的存放目录。</td></tr><tr><td><code>--outFile</code></td><td>所有编译产物打包成一个指定文件。</td></tr><tr><td><code>--preserveConstEnums</code></td><td>不将<code>const enum</code>结构在生成的代码中，替换成常量。</td></tr><tr><td><code>--preserveWatchOutput</code></td><td>watch 模式下不清屏。</td></tr><tr><td><code>--pretty</code></td><td>美化显示编译时的终端输出。这是默认值，但是可以关闭<code>--pretty false</code>。</td></tr><tr><td><code>--project</code>（或者<code>-p</code>）</td><td>指定编译配置文件，或者该文件所在的目录。</td></tr><tr><td><code>--removeComments</code></td><td>编译结果中移除代码注释。</td></tr><tr><td><code>--resolveJsonModule</code></td><td>允许加载 JSON 文件。</td></tr><tr><td><code>--rootDir</code></td><td>指定加载文件所在的根目录，该目录里面的目录结构会被复制到输出目录。</td></tr><tr><td><code>--rootDirs</code></td><td>允许模块定位时，多个目录被当成一个虚拟目录。</td></tr><tr><td><code>--skipDefaultLibCheck</code></td><td>跳过 TypeScript 内置类型声明文件的类型检查。</td></tr><tr><td><code>--skipLibCheck</code></td><td>跳过<code>.d.ts</code>类型声明文件的类型检查。这样可以加快编译速度。</td></tr><tr><td><code>--showConfig</code></td><td>终端输出编译配置信息，而不进行配置。</td></tr><tr><td><code>--sourcemap</code></td><td>为编译产生的 JS 文件生成 SourceMap 文件（.map 文件）。</td></tr><tr><td><code>--sourceRoot</code></td><td>指定 SourceMap 文件里面的 TypeScript 源码根目录位置。</td></tr><tr><td><code>--strict</code></td><td>打开 TypeScript 严格检查模式。</td></tr><tr><td><code>--strictBindCallApply</code></td><td>bind, call、apply 这三个函数的类型，匹配原始函数。</td></tr><tr><td><code>--strictFunctionTypes</code></td><td>如果函数 B 的参数是函数 A 参数的子类型，那么函数 B 不能替代函数 A。</td></tr><tr><td><code>--strictNullChecks</code></td><td>对<code>null</code>和<code>undefined</code>进行严格类型检查。</td></tr><tr><td><code>--strictPropertyInitialization</code></td><td>类的属性必须进行初始值，但是允许在构造函数里面赋值。</td></tr><tr><td><code>--suppressExcessPropertyErrors</code></td><td>关闭对象字面量的多余参数的报错。</td></tr><tr><td><code>--target</code></td><td>指定编译出来的 JS 代码的版本，TypeScript 还会在编译时自动加入对应的库类型声明文件。</td></tr><tr><td><code>--traceResolution</code></td><td>编译时在终端输出模块解析（moduleResolution）的具体步骤。</td></tr><tr><td><code>--typeRoots</code></td><td>设置类型模块所在的目录，替代默认的<code>node_modules/@types</code>。</td></tr><tr><td><code>--types</code></td><td>设置<code>typeRoots</code>目录下需要包括在编译之中的类型模块。</td></tr><tr><td><code>--version</code></td><td>终端输出 tsc 的版本号。</td></tr><tr><td><code>--watch</code>（或者<code>-w</code>）</td><td>进入观察模式，只要文件有修改，就会自动重新编译。</td></tr></tbody></table>`,32)])])}const l=t(a,[["render",c]]),h=JSON.parse('{"path":"/TypeScript/7nmywlc3/","title":"30. tsc 命令行编译器","lang":"zh-CN","frontmatter":{"title":"30. tsc 命令行编译器","createTime":"2025/05/02 12:40:14","permalink":"/TypeScript/7nmywlc3/","copyright":{"creation":"reprint","license":"CC-BY-4.0","source":"https://wangdoc.com/typescript/","author":{"name":"阮一峰","url":"https://www.ruanyifeng.com/"}}},"readingTime":{"minutes":6.72,"words":2015},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/TypeScript/99.《TypeScript 教程 阮一峰》/30.tsc 命令行编译器.md","headers":[],"bulletin":false}');export{l as comp,h as data};
