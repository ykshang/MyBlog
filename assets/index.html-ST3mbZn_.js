import{_ as t,c as p,d as n,a as r,e,b as i,w as d,r as o,o as h}from"./app-Bg7EXfK3.js";const l={};function m(c,a){const s=o("VPLink");return h(),p("div",null,[a[7]||(a[7]=n('<h2 id="一、作用域" tabindex="-1"><a class="header-anchor" href="#一、作用域"><span>一、作用域</span></a></h2><h3 id="_1、定义" tabindex="-1"><a class="header-anchor" href="#_1、定义"><span>1、定义</span></a></h3><p>作用域是指在程序中定义变量时，这个变量所存在的范围或可访问性。</p><p>在 JavaScript 中，作用域分为全局作用域和局部作用域（也称为函数作用域）。</p><h3 id="_3、全局作用域" tabindex="-1"><a class="header-anchor" href="#_3、全局作用域"><span>3、全局作用域</span></a></h3><p>全局作用域是指在代码的任何地方都可以访问的变量和函数，它们被定义在全局范围内，不仅在全局范围内可见，还在局部作用域中可见。全局作用域的变量和函数可以被整个程序中的任何地方访问和使用。</p><h3 id="_3、局部作用域" tabindex="-1"><a class="header-anchor" href="#_3、局部作用域"><span>3、局部作用域</span></a></h3><p>局部作用域是指在函数内部定义的变量和函数，它们只在函数内部可见和可访问。这意味着，在函数外部无法直接访问局部作用域中的变量和函数。</p>',8)),r("p",null,[a[1]||(a[1]=e("局部作用域主要有：",-1)),a[2]||(a[2]=r("mark",null,"函数作用域",-1)),a[3]||(a[3]=e("、",-1)),r("mark",null,[i(s,{href:"./5.%E9%97%AD%E5%8C%85.md"},{default:d(()=>[...a[0]||(a[0]=[e("闭包",-1)])]),_:1})]),a[4]||(a[4]=e("、",-1)),a[5]||(a[5]=r("mark",null,"块作用域",-1)),a[6]||(a[6]=e("等。",-1))]),a[8]||(a[8]=n('<h2 id="二、作用域链" tabindex="-1"><a class="header-anchor" href="#二、作用域链"><span>二、作用域链</span></a></h2><h3 id="_1、定义-1" tabindex="-1"><a class="header-anchor" href="#_1、定义-1"><span>1、定义</span></a></h3><p>作用域链是 JavaScript 中用于在运行时解析标识符（变量名、函数名等）的一种机制。它由多个作用域对象组成的链表，并且每个作用域对象都有一个指向其外部作用域的引用。 当在一个作用域中声明一个变量时，JavaScript 引擎会将该变量添加到该作用域对象中，同时建立一个指向外部作用域的引用。这样就形成了一个作用域链，可以访问外部作用域中的变量。</p><h3 id="_2、作用域链的遍历" tabindex="-1"><a class="header-anchor" href="#_2、作用域链的遍历"><span>2、作用域链的遍历</span></a></h3><p>每个函数都有自己的作用域对象，当函数内部引用一个变量时，它首先会在自己的作用域中查找。如果找不到，它会继续沿着作用域链向上查找，直到找到该变量或达到全局作用域。</p><p><strong>作用域链的建立是在函数创建时确定的，而不是在函数调用时</strong>。</p><h3 id="_3、作用域链的作用" tabindex="-1"><a class="header-anchor" href="#_3、作用域链的作用"><span>3、作用域链的作用</span></a></h3><p>作用域链的存在使得我们可以在函数内部访问外部作用域中的变量，这也是 JavaScript 的闭包机制的基础。同时，作用域链也帮助我们理解变量的可见性和生命周期，并确保变量名不会冲突。</p><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h2><p>理解作用域是编写和理解 JavaScript 代码的重要基础，正确使用作用域可以避免变量名冲突和提高代码的可维护性。</p><p>作用域规定了变量的可见性和生命周期。当在程序中引用一个变量时，JavaScript 会按照作用域链的顺序查找该变量的值。作用域链是一个由多个作用域组成的链表，每个作用域都有一个对外部作用域的引用。当查找一个变量时，JavaScript 首先在当前作用域中查找，如果找不到，就会逐级向上查找，直到找到该变量或达到全局作用域。</p>',11))])}const b=t(l,[["render",m]]),v=JSON.parse('{"path":"/Javascript/wy797jkz/","title":"作用域与作用域链","lang":"zh-CN","frontmatter":{"title":"作用域与作用域链","createTime":"2025/03/12 13:02:28","permalink":"/Javascript/wy797jkz/"},"readingTime":{"minutes":2.61,"words":782},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Javascript/1.基础知识/6.作用域与作用域链.md","headers":[],"bulletin":false}');export{b as comp,v as data};
