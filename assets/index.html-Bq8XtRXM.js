import{_ as i,c as a,d as n,o as l}from"./app-Bg7EXfK3.js";const e={};function p(h,s){return l(),a("div",null,[...s[0]||(s[0]=[n(`<p>分享一个常用的一个 <strong>万能+灵活</strong> 配置：</p><p>可以本地运行，可以在 github 上运行，都可以自动部署到 github 的 gh-pages 分支。</p><h3 id="step-1-本地创建构建文件并测试一下" tabindex="-1"><a class="header-anchor" href="#step-1-本地创建构建文件并测试一下"><span>Step 1 本地创建构建文件并测试一下</span></a></h3><p>本地创建一个<code>deploy.sh</code>，内容如下：（文件名随意，和构建流程文件能对得上行）</p><p>该脚本运行完能将结果能推送到 gh-pages 分支，并且不影响本地项目。</p><p>文件里的邮箱要和 github 上的邮箱和用户名一致，不然会报错。<strong>因为要和对应的 ssh keys 能验证匹配</strong></p><p><strong>注意：本地项目下运行可以删掉<code>npm install</code>，因为不需要重新安装依赖</strong></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">#!/usr/bin/env sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 确保脚本抛出遇到的错误</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">set</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -e</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 运行构建命令，生成静态文件</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> run</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docs:build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 进入生成的文件夹</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> docs/.vuepress/dist</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 推送构建结果到gh-pages分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 邮箱</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> user.email</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">xxxxxx@qq.com</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 用户名</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> config</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --global</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> user.name</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">xxxx</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 添加文件并提交</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -A</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Automatic build</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 不确定 git init 后，当前分支是master 还是 main</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 这里再次强制创建切换到 master 分支。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 可以指定其他的分支名，能和 push 命令里的分支名对应即可。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -B</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 强制推送到gh-pages分支。</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -f</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git@github.com:ykshang/MyInterviewDocs.git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> master:gh-pages</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> -</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="step-2-测试一下" tabindex="-1"><a class="header-anchor" href="#step-2-测试一下"><span>Step 2 测试一下</span></a></h3><p>测试主要分两部分：</p><ol><li>使用<code>docs:build</code> 看看构建报错吗？构建结果是否正常？</li><li>运行<code>bash deploy.sh</code> 看看报错吗？ 本地运行的话，运行结果有没有推送到仓库的 <code>gh-pages</code> 分支的？过一两分钟，刷新一下页面，你修改的博客内容是不是生效了？</li></ol><p>在本地使用<code>http-server</code>试试能不能访问构建出来的静态文件。</p><h4 id="step-3-创建一个变量存储-id-rsa-私钥。" tabindex="-1"><a class="header-anchor" href="#step-3-创建一个变量存储-id-rsa-私钥。"><span>Step 3 创建一个变量存储 <code>id_rsa</code> 私钥。</span></a></h4><p>在<code>setting -&gt; secrets</code> 下创建一个变量 <code>ACTION_DEPLOY_KEY</code>。（名字随意，保持和 <code>deploy.yml</code> 文件的引用变量的名字一致即可）</p><p>打开本地 user 目录下，把<code>.ssh/id_rsa</code> 的文件内容复制给 <code>ACTION_DEPLOY_KEY</code> 变量。或者打开用户设置，把<code>SSH keys</code> 复制过去。</p><p>这个变量主要是就是身份认证，方便你把构建结果推送（ssh）到 <code>gh-pages</code> 分支</p><h3 id="step-4-创建-github-的工作流文件并拉取到本地" tabindex="-1"><a class="header-anchor" href="#step-4-创建-github-的工作流文件并拉取到本地"><span>Step 4 创建 github 的工作流文件并拉取到本地</span></a></h3><p>构建脚本能正常运行并推送代码的话，就可以配置工作流了。</p><p>在<code>github -&gt; aciton</code> 里创建个 <code>workflow</code> 工作流。流程文件名字起一下，如：<code>deploy.yml</code>。</p><p>创建提交以后，在本地更新一下，把这个文件<code>deploy.yml</code> 拉取到本地。</p><p>可以复制下面的代码，直接使用：</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-yml"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># This is a basic workflow to help you get started with Actions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> CI</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># Controls when the action will run.</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # Triggers the workflow on push or pull request events but only for the master branch</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 触发构建的动作和对应的分支，代码在哪，分支就配置哪。</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # 这里是master分支，所以每次push到master分支，就会触发构建。</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  push</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    branches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">master</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # pull_request 也会触发构建</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  pull_request</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    branches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">master</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # Allows you to run this workflow manually from the Actions tab</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  workflow_dispatch</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">jobs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  # This workflow contains a single job called &quot;build&quot;</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  build</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # The type of runner that the job will run on</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    runs-on</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    # Steps represent a sequence of tasks that will be executed as part of the job</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    steps</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> uses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> actions/checkout@v2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Setup install env</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        env</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          # 需要在 secrets 创建该变量 ACTION_DEPLOY_KEY</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          # 并且把你本地计算机的私钥复制进去，和用户设置里的\`SSH keys\` 保持一致</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">          # 方便后续，构建完成后，推送代码到gh-pages分支。</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">          ACTION_DEPLOY_KEY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> \${{ secrets.ACTION_DEPLOY_KEY }}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> |</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          # set up private key for deploy</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          mkdir -p ~/.ssh/</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          chmod 600 ~/.ssh/id_rsa</span></span>
<span class="line"><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">      # Runs a set of commands using the runners shell</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      -</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        # 运行构建脚本</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">        run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> bash deploy.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="step5-本地推送代码并测试一下" tabindex="-1"><a class="header-anchor" href="#step5-本地推送代码并测试一下"><span>Step5 本地推送代码并测试一下</span></a></h4><p>前边的 <code>deploy.yml</code> 中指定了<code>push</code> 到 <code>mastser</code> 分支时触发构建</p><p>我们可以在本地代码里，修改一下内容，然后推送到仓库的 <code>master</code> 分支。</p><p>然后去<code>action</code> 里看一下，是否能正常运行构建脚本？</p><p>如果构建脚本能正常运行，并且能推送到 <code>gh-pages</code> 分支，那么就说明构建流程配置成功了。</p>`,27)])])}const d=i(e,[["render",p]]),k=JSON.parse('{"path":"/article/9z4lpa1m/","title":"如何配置 Github Page 的部署","lang":"zh-CN","frontmatter":{"title":"如何配置 Github Page 的部署","createTime":"2025/05/14 13:50:15","permalink":"/article/9z4lpa1m/"},"readingTime":{"minutes":3.6,"words":1079},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"部署相关/如何配置 Github Page 的部署.md","headers":[],"categoryList":[{"id":"b752a1","sort":10003,"name":"部署相关"}],"bulletin":false}');export{d as comp,k as data};
