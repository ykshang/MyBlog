import{_ as n,c as e,a as i,b as t,d as l,r as h,o as d}from"./app-Bg7EXfK3.js";const k={};function r(p,s){const a=h("Mermaid");return d(),e("div",null,[s[0]||(s[0]=i("p",null,"好的，前端响应式布局的发展历史是一段从粗糙到精细、从「Hack」到「原生」、从「布局」到「体验」的演进史。它不仅是技术的进步，更是 Web 设计哲学的变化。",-1)),s[1]||(s[1]=i("p",null,"以下是其发展的主要阶段和时间线：",-1)),t(a,{code:"eJxlUV9P01AUf+dT3EdNfBhLjMYYHyTqiyYmPPC8YRMb5mq6Gnkim7CtEFlnrOJYt3boZEBoGbCttGX7Mj3ndt+C25Y/Xbhv957f33sk/hOX4/PcHGFH4qUcR2Bzmx5Z8HMbHBU8Bex16BdB+QH9X6CcRsACtyzxQp6wO0PjztB3/0aD8KylU6nH5BmBpgPmbkx/nhVfTFsNLJbeL0w7g2lr7x4ch6dsfAenjTHIFbRUMC/B+T/jG1htquq+XcOdA9T0W610aj4VOt9kX+KygTkOzE4oiJoVWMcxlTx4JX3M5Mm7jLgsSBL3MCmRDtPIdd920KhCtRKRr+82TNZjSajpIDdmYuFWkZmgpwaTZrJfrNipYHsI581gMAoVXwqCVJDEzGdCjzdRqfvjZmRklNHw6JlL3bteNxp034Wtnu/9gbIcgt9+WeHIkihkc9zXwgof8ZU6VJ04Iq1XYDKYiUhrJ2xXLDv7hGTnJ0z9dY5bzQqrxLddHJRCMd8uUvc83gnd3QDPgX/7MOpCeZQkP2XkhcVF8kbkPyTZzvckm7oytkv4+wI78uy3aYfY6rJtsnCg9RLK6fm1sLW74bvD6UGfdb9dbWgA5gU0eqh3A2vvEYH+N1AMNEbXU/9So2oPdD1+mrsCB6l1aA=="}),s[2]||(s[2]=l(`<h2 id="史前时代-固定布局与液态布局-2005" tabindex="-1"><a class="header-anchor" href="#史前时代-固定布局与液态布局-2005"><span>史前时代 - 固定布局与液态布局 (~2005)</span></a></h2><p>在“响应式设计”这个概念出现之前，开发者们已经在尝试解决多设备浏览的问题。</p><h3 id="固定布局-fixed-layout" tabindex="-1"><a class="header-anchor" href="#固定布局-fixed-layout"><span>固定布局 (Fixed Layout)</span></a></h3><ul><li><strong>做法</strong>：使用以 <code>px</code> 为单位的固定宽度（如 960px、1200px），通常居中显示。</li><li><strong>局限性</strong>：在不同设备上，要么显示不全出现横向滚动条，要么两侧有大片空白。这是最早期的、只为桌面端设计的方案。</li></ul><h3 id="液态布局-liquid-layout-fluid-layout" tabindex="-1"><a class="header-anchor" href="#液态布局-liquid-layout-fluid-layout"><span>液态布局 (Liquid Layout / Fluid Layout)</span></a></h3><ul><li><strong>做法</strong>：使用百分比 (<code>%</code>) 而非像素来定义宽度，布局会随浏览器窗口大小而“流动”。</li><li><strong>局限性</strong>：布局虽然可变，但当窗口过大或过小时，排版会变得难以阅读（行长过长或过短）。缺乏精细的控制。</li></ul><h2 id="响应式诞生与早期-2010-2012" tabindex="-1"><a class="header-anchor" href="#响应式诞生与早期-2010-2012"><span>响应式诞生与早期 (2010 - 2012)</span></a></h2><p>这是响应式设计从无到有的关键阶段，其核心突破是 <strong>CSS3 Media Queries（媒体查询）</strong> 的引入。</p><h4 id="标志性事件" tabindex="-1"><a class="header-anchor" href="#标志性事件"><span>标志性事件</span></a></h4><p><strong>2010 年</strong>：网页设计师 <strong>Ethan Marcotte</strong> 在《A List Apart》上发表开创性文章 <strong><a href="https://alistapart.com/article/responsive-web-design/" target="_blank" rel="noopener noreferrer">Responsive Web Design</a></strong>，首次提出了“响应式网页设计”（RWD）这个术语。</p><p><strong>核心三要素</strong>：</p><ul><li><strong>流体网格 (Fluid Grids)</strong>：基于百分比的布局。</li><li><strong>弹性图片/媒体 (Flexible Images)</strong>：<code>max-width: 100%;</code> 防止媒体溢出容器。</li><li><strong>媒体查询 (Media Queries)</strong>：根据设备特性（如屏幕宽度、分辨率）应用不同的 CSS 样式。</li></ul><h4 id="早期实践" tabindex="-1"><a class="header-anchor" href="#早期实践"><span>早期实践</span></a></h4><ul><li>通过媒体查询设置不同的 <strong>断点 (Breakpoints)</strong>，为不同宽度的设备（手机、平板、桌面）编写不同的 CSS 规则。</li><li><strong>移动端优化</strong>：添加 <code>viewport</code> meta 标签，让移动浏览器正确渲染页面比例。</li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">meta</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">viewport</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> content</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">width=device-width, initial-scale=1.0</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="框架崛起与移动端优先-2012-2015" tabindex="-1"><a class="header-anchor" href="#框架崛起与移动端优先-2012-2015"><span>框架崛起与移动端优先 (2012 - 2015)</span></a></h2><p>随着移动设备爆炸式增长，响应式成为<strong>必备需求</strong>而非可选功能。为了提高开发效率，一系列响应式 CSS 框架应运生。</p><h4 id="css-框架的黄金时代" tabindex="-1"><a class="header-anchor" href="#css-框架的黄金时代"><span>CSS 框架的黄金时代</span></a></h4><p><strong>Bootstrap</strong>、<strong>Foundation</strong> 等框架迅速流行。它们提供了强大的<strong>栅格系统 (Grid System)</strong>，开发者通过添加预定义的类（如 <code>.col-md-6</code>, <code>.col-sm-12</code>）就能快速构建响应式布局，极大降低了开发门槛。</p><h4 id="设计理念转变-移动优先-mobile-first" tabindex="-1"><a class="header-anchor" href="#设计理念转变-移动优先-mobile-first"><span>设计理念转变：移动优先 (Mobile First)</span></a></h4><p>提出者为 <strong>Luke Wroblewski</strong>。其理念为：<strong>从为移动设备设计开始，然后逐步增强，去适配更大尺寸屏幕，添加更复杂的功能</strong>。这颠覆了传统的“桌面优先再删减”的思路。</p><p>技术实现上，使用 <code>min-width</code> 媒体查询，而不是 <code>max-width</code>。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 移动优先样式 (默认) */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">container</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">%</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 平板及以上 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">media</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">min-width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 768</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">container</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 750</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 桌面及以上 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">media</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">min-width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 992</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">container</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    width</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 970</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">px</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="现代布局的诞生-flexbox-与-grid-2015-2018" tabindex="-1"><a class="header-anchor" href="#现代布局的诞生-flexbox-与-grid-2015-2018"><span>现代布局的诞生 - Flexbox 与 Grid (2015 - 2018)</span></a></h2><p>虽然媒体查询解决了“不同设备不同样式”的问题，但<strong>单个容器内的内部布局</strong>依然很棘手。CSS 原生强大布局模块的成熟真正解决了这个问题。</p><h4 id="flexbox-弹性盒子布局" tabindex="-1"><a class="header-anchor" href="#flexbox-弹性盒子布局"><span>Flexbox (弹性盒子布局)</span></a></h4><ul><li><strong>解决核心</strong>：<strong>一维布局</strong>（行或列）问题。提供了空间分配、对齐、排序的强大能力，完美取代了过去的 Float 和 Inline-block Hack。</li><li><strong>应用</strong>：导航栏、卡片组件、垂直居中等任何需要线性布局的场景。</li></ul><h4 id="css-grid-网格布局" tabindex="-1"><a class="header-anchor" href="#css-grid-网格布局"><span>CSS Grid (网格布局)</span></a></h4><ul><li><strong>解决核心</strong>：<strong>二维布局</strong>（行和列同时）问题。允许开发者直接定义行和列，然后将项目精确地放置到网格区域中。这是布局领域的终极武器。</li><li><strong>意义</strong>：让原生 CSS 布局能力达到了前所未有的高度，许多之前需要复杂 Hack 或 JavaScript 才能实现的布局现在几行 CSS 就能搞定。</li></ul><h2 id="组件驱动下的响应式新方案-2018-至今" tabindex="-1"><a class="header-anchor" href="#组件驱动下的响应式新方案-2018-至今"><span>组件驱动下的响应式新方案 (2018 - 至今)</span></a></h2><p>媒体查询是基于 <strong>整个视口（viewport）</strong> 的，但现代前端开发是 <strong>组件化</strong> 的。一个组件应该根据 <strong>其自身容器的大小</strong> 而非屏幕大小来调整样式，这才是更合理的逻辑。</p><h4 id="容器查询-container-queries" tabindex="-1"><a class="header-anchor" href="#容器查询-container-queries"><span>容器查询 (Container Queries)</span></a></h4><ul><li><strong>概念</strong>：允许组件根据其父容器的宽度（而非视口宽度）来应用样式。这被誉为“下一个改变游戏规则的 CSS 特性”。</li><li><strong>支持</strong>：<strong>2023 年</strong>，主流浏览器全面支持，标志着响应式设计进入新时代。</li><li><strong>代码示例</strong>：</li></ul><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">card-container</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">card</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    &lt;!-- 卡片内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  &lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">div</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">card-container</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  container-type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> inline-size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 当.card的容器宽度大于400px时 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">container</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> (min-width: 400px) </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">card</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">    display</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> flex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="css-层叠样式-css-layers" tabindex="-1"><a class="header-anchor" href="#css-层叠样式-css-layers"><span>CSS 层叠样式 (CSS Layers)</span></a></h4><p>你可以将 CSS层叠层（Layers） 理解为一个个预制的规则集。每个集合里可以装很多CSS规则。</p><p>浏览器在计算样式时，不再是直接比较CSS规则的特异性，而是先比较这些规则集的优先级。</p><p>无论你的css选择器的特异性多高，后声明的层中的样式，总是会覆盖先声明的层中的同名样式。</p><p>在相同层内，会根据css规则的特异性进行比较，特异性高的样式会覆盖特异性低的样式，后声明的样式覆盖先声明的同名样式。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> class</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">my-btn</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Click Me</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 定义一个层的顺序：base层最先，theme层最后（优先级最高） */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">layer</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> base, theme</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 在 base 层：规则特异性很高 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">layer</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> base </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  #</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">page</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> .</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">button</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> background-color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> grey</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* 在 theme 层：规则特异性非常低 */</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">@</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">layer</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> theme </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  .</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">my-btn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> background-color</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> blue</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="作用域样式-scope-styles" tabindex="-1"><a class="header-anchor" href="#作用域样式-scope-styles"><span>作用域样式 (Scope Styles)</span></a></h6><p>允许在 CSS 中定义样式的作用域，更好地适配组件化开发。定义的规则，只在当前组件生效</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-css"><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">style</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> scoped</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">&lt;/</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">style</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="总结与对比" tabindex="-1"><a class="header-anchor" href="#总结与对比"><span>总结与对比</span></a></h2><table><thead><tr><th>阶段</th><th>核心技术/理念</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td><strong>史前时代</strong></td><td>固定宽度、液态布局</td><td>简单、可控</td><td>体验差、不灵活</td></tr><tr><td><strong>早期响应式</strong></td><td>媒体查询、流体网格</td><td>跨设备适配、概念清晰</td><td>断点选择困难、代码冗余</td></tr><tr><td><strong>框架时代</strong></td><td>栅格系统 (Bootstrap)</td><td>开发效率高、易于上手</td><td>样式臃肿、定制化成本高</td></tr><tr><td><strong>现代布局</strong></td><td>Flexbox、CSS Grid</td><td>布局强大、原生支持、语义化</td><td>学习曲线稍陡峭</td></tr><tr><td><strong>未来趋势</strong></td><td><strong>容器查询</strong>、组件化</td><td>真正组件化、更内聚、更灵活</td><td>浏览器兼容性（目前已很好）</td></tr></tbody></table><h3 id="核心思想演进" tabindex="-1"><a class="header-anchor" href="#核心思想演进"><span>核心思想演进</span></a></h3><ul><li><strong>从 <code>Pixel</code> (像素) 到 <code>Percentage</code> (百分比) 再到 <code>Fraction</code> (分数单位 <code>fr</code>)</strong>。</li><li><strong>从 <code>Float</code>/<code>Position</code> 的 Hack 到 <code>Flexbox</code>/<code>Grid</code> 的语义化原生布局</strong>。</li><li><strong>从 <code>Viewport</code> (视口) 媒体查询 到 <code>Container</code> (容器) 查询</strong>。</li><li><strong>从「页面」响应式 到「组件」响应式</strong>。</li></ul><p>响应式布局的发展史，是 Web 技术不断追求 <strong>更好用户体验</strong> 和 <strong>更高开发效率</strong> 的完美体现。</p>`,51))])}const c=n(k,[["render",r]]),o=JSON.parse('{"path":"/article/xm2o4jdy/","title":"响应式布局的发展历史","lang":"zh-CN","frontmatter":{"title":"响应式布局的发展历史","createTime":"2025/09/20 15:53:52","permalink":"/article/xm2o4jdy/","tags":["响应式布局","CSS","VW/VH","媒体查询","百分比布局","弹性布局","网格布局","响应式图片"]},"readingTime":{"minutes":6.63,"words":1988},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"响应式布局/响应式布局的发展历史.md","headers":[],"categoryList":[{"id":"91815d","sort":10007,"name":"响应式布局"}],"bulletin":false}');export{c as comp,o as data};
