import{_ as s,c as i,d as e,o as n}from"./app-Bg7EXfK3.js";const h={};function t(l,a){return n(),i("div",null,[...a[0]||(a[0]=[e(`<h2 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介"><span>一、简介</span></a></h2><p>JavaScript 内存泄漏指的是在执行一个长期运行的应用程序时，由于缺乏适当的垃圾回收机制，导致不再需要的内存无法被释放，从而累积占用过多内存，最终导致应用崩溃或性能下降的情况。</p><h2 id="二、常见的内存泄漏" tabindex="-1"><a class="header-anchor" href="#二、常见的内存泄漏"><span>二、常见的内存泄漏</span></a></h2><h3 id="_1、意外的全局变量" tabindex="-1"><a class="header-anchor" href="#_1、意外的全局变量"><span>1、意外的全局变量</span></a></h3><p>未声明的变量会被自动升级为全局对象，作用域为 window 或者整个窗口。 如果不小心忘记了 var、let、const，可能创建意外的全局变量。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">global variable</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/// 作用域等同于 window.a</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、未解除的事件监听器" tabindex="-1"><a class="header-anchor" href="#_2、未解除的事件监听器"><span>2、未解除的事件监听器</span></a></h3><p>如果一个 DOM 元素被移除，但相关的事件监听器仍然保持在内存中，就会发生内存泄漏。</p><h3 id="_3、闭包" tabindex="-1"><a class="header-anchor" href="#_3、闭包"><span>3、闭包</span></a></h3><p>如果一个函数内部定义了另一个函数，并且这个内部函数引用了外部函数的变量，那么即使外部函数已经执行完毕，这些变量也不会被垃圾回收，因为内部函数依然可以访问它们。</p><h3 id="_4、未移除的定时器或回调函数" tabindex="-1"><a class="header-anchor" href="#_4、未移除的定时器或回调函数"><span>4、未移除的定时器或回调函数</span></a></h3><p>设置了定时器或者异步回调函数，但是没有在不需要时清除它们。</p><h3 id="_5、dom-引用没有清理" tabindex="-1"><a class="header-anchor" href="#_5、dom-引用没有清理"><span>5、DOM 引用没有清理</span></a></h3>`,13)])])}const d=s(h,[["render",t]]),p=JSON.parse('{"path":"/Javascript/xhc7zzl7/","title":"内存泄漏","lang":"zh-CN","frontmatter":{"title":"内存泄漏","createTime":"2025/03/11 22:01:22","permalink":"/Javascript/xhc7zzl7/"},"readingTime":{"minutes":1.14,"words":342},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Javascript/1.基础知识/2.内存泄漏.md","headers":[],"bulletin":false}');export{d as comp,p as data};
