import{_ as n,c as e,d as i,b as h,r as t,o as l}from"./app-Bg7EXfK3.js";const d={};function r(k,s){const a=t("Mermaid");return l(),e("div",null,[s[0]||(s[0]=i(`<p>以下是 Webpack 中 <strong>Chunk</strong>、<strong>Vendor</strong>、<strong>Bundle</strong> 和 <strong>Runtime</strong> 的详细概念解析，通过对比和示例帮助你彻底理解它们的区别与联系：</p><h2 id="chunk-代码块" tabindex="-1"><a class="header-anchor" href="#chunk-代码块"><span>Chunk 代码块</span></a></h2><h3 id="_1、定义" tabindex="-1"><a class="header-anchor" href="#_1、定义"><span>1、定义</span></a></h3><p>Webpack 内部的代码分割单元，是模块（Module）的集合，代表编译过程中的中间产物。</p><h3 id="_2、核心特点" tabindex="-1"><a class="header-anchor" href="#_2、核心特点"><span>2、核心特点</span></a></h3><h4 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h4><ul><li>每个入口文件（entry）生成一个 <strong>Initial Chunk</strong></li><li>动态导入（<code>import()</code>）生成 <strong>Async Chunk</strong></li><li>通过 <code>splitChunks</code> 拆分出的公共代码块</li><li>第三方库代码（<code>node_modules</code>）生成的 <strong>Vendor Chunk</strong></li></ul><h4 id="示例配置" tabindex="-1"><a class="header-anchor" href="#示例配置"><span>示例配置</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 动态导入生成 Async Chunk</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> lazyModule</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> import</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* webpackChunkName: &quot;lazy&quot; */</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">./lazy.js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h4><p>控制代码如何被拆分，优化加载性能。</p><h2 id="vendor-第三方依赖库" tabindex="-1"><a class="header-anchor" href="#vendor-第三方依赖库"><span>Vendor 第三方依赖库</span></a></h2><h3 id="_1、定义-1" tabindex="-1"><a class="header-anchor" href="#_1、定义-1"><span>1、定义</span></a></h3><p>专门存放从 <code>node_modules</code> 引入的第三方库的 <strong>特殊 Chunk</strong>。</p><h3 id="_2、核心特点-1" tabindex="-1"><a class="header-anchor" href="#_2、核心特点-1"><span>2、核心特点</span></a></h3><h4 id="优化意义" tabindex="-1"><a class="header-anchor" href="#优化意义"><span>优化意义</span></a></h4><ul><li>单独打包，便于利用浏览器缓存（第三方代码更新频率低）</li><li>避免重复打包相同的依赖</li></ul><h4 id="典型配置" tabindex="-1"><a class="header-anchor" href="#典型配置"><span>典型配置</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">optimization</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  splitChunks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    cacheGroups</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      vendor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> /</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#AB5E3F;--shiki-dark:#C4704F;">node_modules</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#BDA437;--shiki-dark:#E6CC77;">\\\\</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 匹配 node_modules</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">vendor</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">        chunks</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">all</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">      }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出文件" tabindex="-1"><a class="header-anchor" href="#输出文件"><span>输出文件</span></a></h4><p><code>vendor.[hash].js</code>（包含 React、Lodash 等库）</p><h2 id="bundle-输出文件" tabindex="-1"><a class="header-anchor" href="#bundle-输出文件"><span>Bundle 输出文件</span></a></h2><h3 id="_1、定义-2" tabindex="-1"><a class="header-anchor" href="#_1、定义-2"><span>1、定义</span></a></h3><p>最终生成的、可直接被浏览器加载的文件，由一个或多个 Chunk 经过合并和优化后生成。</p><h3 id="_2、核心特点-2" tabindex="-1"><a class="header-anchor" href="#_2、核心特点-2"><span>2、核心特点</span></a></h3><h4 id="与-chunk-的关系" tabindex="-1"><a class="header-anchor" href="#与-chunk-的关系"><span>与 Chunk 的关系</span></a></h4><ul><li>1 个 Bundle 可能包含多个 Chunk</li><li>1 个 Chunk 也可能输出为多个 Bundle（如代码分割后）</li><li>主 Bundle （代码入口）包含 Initial Chunk + Runtime</li></ul><h4 id="输出配置" tabindex="-1"><a class="header-anchor" href="#输出配置"><span>输出配置</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">output</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  filename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[name].[contenthash].js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 入口 Bundle</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  chunkFilename</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">[name].[chunkhash].js</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 非入口 Bundle</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见文件" tabindex="-1"><a class="header-anchor" href="#常见文件"><span>常见文件</span></a></h4><ul><li><code>main.js</code>（入口 Bundle）</li><li><code>vendor.js</code>（第三方库 Bundle）</li><li><code>1.async.js</code>（动态加载的 Bundle，代码中被 <code>import()</code> 引入的模块）</li></ul><h2 id="runtime-运行时" tabindex="-1"><a class="header-anchor" href="#runtime-运行时"><span>Runtime 运行时</span></a></h2><h3 id="_1、定义-3" tabindex="-1"><a class="header-anchor" href="#_1、定义-3"><span>1、定义</span></a></h3><p>Webpack 生成的胶水代码，用于管理模块的加载、解析和执行。</p><h3 id="_2、核心特点-3" tabindex="-1"><a class="header-anchor" href="#_2、核心特点-3"><span>2、核心特点</span></a></h3><h4 id="包含内容" tabindex="-1"><a class="header-anchor" href="#包含内容"><span>包含内容</span></a></h4><ul><li><code>__webpack_require__</code> 函数：用来替换 ES Module、CommonJS 等模块化语法，抹平浏览器之间的差异</li><li>模块缓存逻辑</li><li>异步 Chunk 的加载逻辑</li></ul><h4 id="优化配置" tabindex="-1"><a class="header-anchor" href="#优化配置"><span>优化配置</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 单独提取 Runtime，避免影响主文件缓存</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">optimization</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  runtimeChunk</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">single</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出文件-1" tabindex="-1"><a class="header-anchor" href="#输出文件-1"><span>输出文件</span></a></h4><p><code>runtime~main.js</code>（文件较小，通常几 KB）</p><h2 id="四者关系总结" tabindex="-1"><a class="header-anchor" href="#四者关系总结"><span>四者关系总结</span></a></h2>`,42)),h(a,{code:"eJxLL0osyFAIceFSAALH6Kd9858u7362YuHTudNjFXR17Wqe75n2Yv3EGgWnaOeM0rzsWLBCJ5CUgnO0Z15mSWZijgKGlEu0Y3FlXjKmhGt0WGpeSn4RsoxbdFBpXklmbirExmebVzxtXVqj4B7tVJqXkpMKUeQM1u4OZrsgsV2hbDDHHczxiM5NzMzTyyqG6IQIekaXgS1GE/aKNtRLBDkVTdw7ugjiJrA4AL4cV44="}),s[1]||(s[1]=i('<h2 id="关键区别对比表" tabindex="-1"><a class="header-anchor" href="#关键区别对比表"><span>关键区别对比表</span></a></h2><table><thead><tr><th>概念</th><th>阶段</th><th>生成方式</th><th>典型文件名</th><th>作用对象</th></tr></thead><tbody><tr><td><strong>Chunk</strong></td><td>编译过程中</td><td>Webpack 编译的中间产物</td><td>-</td><td>模块集合</td></tr><tr><td><strong>Vendor</strong></td><td>优化阶段</td><td>从 <code>node_modules</code> 提取</td><td><code>vendor.[hash].js</code></td><td>第三方库</td></tr><tr><td><strong>Bundle</strong></td><td>输出阶段</td><td>Chunk 的最终打包结果</td><td><code>main.[hash].js</code></td><td>可直接运行的文件</td></tr><tr><td><strong>Runtime</strong></td><td>运行时生成</td><td>Webpack 注入的胶水代码</td><td><code>runtime~main.js</code></td><td>模块加载逻辑</td></tr></tbody></table>',2))])}const c=n(d,[["render",r]]),o=JSON.parse('{"path":"/Webpack/q72de3bj/","title":"Chunk、Vendor、Bundle、Runtime","lang":"zh-CN","frontmatter":{"title":"Chunk、Vendor、Bundle、Runtime","createTime":"2025/06/20 18:47:05","permalink":"/Webpack/q72de3bj/","outline":2},"readingTime":{"minutes":2.36,"words":707},"git":{"createdTime":1758993364000,"updatedTime":1758993364000,"contributors":[{"name":"kangkang shang","username":"","email":"535634238@qq.com","commits":1,"avatar":"https://gravatar.com/avatar/899a2a8091fc73ff6879f8a45f98a5a42ca8b9665bca19ce8af3a144e416ed11?d=retro"}],"changelog":[{"hash":"1eb9b32660588040229600108dbdda4327afcdb3","time":1758993364000,"email":"535634238@qq.com","author":"kangkang shang","message":"docs(Javascript): 更新Generator生成器函数文档内容"}]},"filePathRelative":"notes/Webpack/1.基础学习/4.Chunk、Vendor、Bundle、Runtime.md","headers":[],"bulletin":false}');export{c as comp,o as data};
